{
    "swagger": "2.0",
    "info": {
        "description": "A Lucidworks Fusion microservice for CRUD operations on templates and zones, and for retrieving and rendering templates for particular navigation states",
        "version": "5.5.2",
        "title": "Fusion Templating API",
        "termsOfService": "https://lucidworks.com/legal/developer-license-agreement/",
        "contact": {
            "name": "Lucidworks",
            "url": "www.lucidworks.com",
            "email": "support@lucidworks.com"
        },
        "license": {
            "name": "License of API",
            "url": "https://lucidworks.com/legal/developer-license-agreement/"
        }
    },
    "host": "docs5512apis.lucidworkstest.com",
    "basePath": "/templating",
    "tags": [{
        "name": "render-controller",
        "description": "Endpoints for retrieving and rendering templates for particular navigation states"
    }, {
        "name": "templates-controller",
        "description": "CRUD endpoint for templates"
    }, {
        "name": "trigger-controller",
        "description": "Endpoints for getting the template that triggers for a given nav state, without rendering."
    }, {
        "name": "zones-controller",
        "description": "CRUD endpoint for zones"
    }],
    "paths": {
        "/render/{app}": {
            "get": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates.",
                "description": "navigation state is determined by the query terms (q) and filters (fq) in the query params, all other params will be passed through to any query profiles invoked during rendering.",
                "operationId": "renderUsingGET",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "params",
                    "in": "query",
                    "description": "Query parameters",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "showInactive",
                    "in": "query",
                    "description": "Legacy. Same as staging parameter. Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "staging",
                    "in": "query",
                    "description": "Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "templateTypes",
                    "in": "query",
                    "description": "Comma-separated list of template types, indicating which possible types of templates to trigger (e.g. landing, item-detail...)",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi",
                    "default": "landing"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates.",
                "description": "navigation state is determined by the query terms (q) and filters (fq) in the query params, all other params will be passed through to any query profiles invoked during rendering.",
                "operationId": "renderWithPostUsingPOST",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "templateTypes",
                    "in": "formData",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi"
                }, {
                    "name": "showInactive",
                    "in": "formData",
                    "required": false,
                    "type": "boolean"
                }, {
                    "name": "staging",
                    "in": "formData",
                    "required": false,
                    "type": "boolean"
                }, {
                    "in": "body",
                    "name": "params",
                    "description": "Query parameters",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/renderDSL/{app}": {
            "post": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates. The provided DSL request object + any additional request parameters are passed through to each query profile when rendering each zone.",
                "description": "navigation state is determined from the dsl object by the userQuery (for the search terms) and the filters (for the filter values).",
                "operationId": "renderWithDslUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "dslRequest",
                    "description": "DSL request, used to determine navigation state and will be passed through to the indicated query profiles when rendering each zone.",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/DslRequest"
                    }
                }, {
                    "name": "requestParams",
                    "in": "query",
                    "description": "Additional request parameters, will be passed through to the query profile when rendering a zone. If there is a 'tags' parameter it will be merged with any tags configured in the zones.",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "staging",
                    "in": "query",
                    "description": "Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "templateTypes",
                    "in": "query",
                    "description": "Comma-separated list of template types, indicating which possible types of templates to trigger (e.g. landing, item-detail...)",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi",
                    "default": "landing"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/renderId/{templateId}": {
            "get": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template with the specified id. All provided query params will be passed on to each query profile invoked during rendering.",
                "operationId": "renderIdUsingGET",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "params",
                    "in": "query",
                    "description": "Query parameters, will be passed through to the query profiles when rendering each zone.",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "templateId",
                    "in": "path",
                    "description": "templateId",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template with the specified id. All provided query params will be passed on to each query profile invoked during rendering.",
                "operationId": "renderIdWithPostUsingPOST",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["*/*"],
                "parameters": [{
                    "in": "body",
                    "name": "params",
                    "description": "Query parameters, will be passed through to the query profiles when rendering each zone.",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }, {
                    "name": "templateId",
                    "in": "path",
                    "description": "templateId",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/renderIdDSL/{templateId}": {
            "post": {
                "tags": ["render-controller"],
                "summary": "Retrieve and render the template with the specified id, passing the provided DSL request to each query profile invoked during rendering.",
                "operationId": "renderIdWithDSLUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "dslRequest",
                    "description": "DSL request, will be passed through to the indicated query profiles when rendering each zone.",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/DslRequest"
                    }
                }, {
                    "name": "params",
                    "in": "query",
                    "description": "Query parameters",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "templateId",
                    "in": "path",
                    "description": "templateId",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RenderResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "tags": ["templates-controller"],
                "summary": "Get all entities with optional params to filter the results. Each entity can have both a staging and published version, and the staging version is marked dirty if there are changes needing publication. The default behavior displays only the staging version of entities.  Setting hideStaging=true will exclude the staging version of entities from the response.  The context parameter filters entities based on which app they are part of by specifying, for example, app:SomeApp. Any other comma-separated contexts in the context parameter are allowed but ignored.",
                "operationId": "getAllEntitiesRESTUsingGET",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "hideStaging",
                    "in": "query",
                    "description": "if true, will exclude the staging version of entities in the response.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "showDirtyOnly",
                    "in": "query",
                    "description": "if true, will only show staging entities marked as dirty (will not show published entities).",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "showPublished",
                    "in": "query",
                    "description": "if true, will include the published version of entities in the response.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TemplateRes"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": ["templates-controller"],
                "summary": "Create a new template from JSON. This template will initially be dirty and unpublished and can be published using the publish endpoint. Operation will fail if any zones referenced in this template do not exist.",
                "operationId": "createEntityRESTUsingPOST",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "A new template serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/TemplateReq"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates/_import": {
            "post": {
                "tags": ["templates-controller"],
                "summary": "For internal use only. Import the entity from existing app. Same as the normal POST / create endpoint, but dirty flag / publish status will be preserved. Only to be used for imports / upgrades.",
                "operationId": "importEntityRESTUsingPOST",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "Existing entity serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/TemplateReq"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates/_schema": {
            "get": {
                "tags": ["templates-controller"],
                "summary": "Get JSON schema for objects managed by this API",
                "operationId": "getEntitySchemaUsingGET",
                "produces": ["application/json;qs=0.9", "application/schema+json;qs=1.0"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ObjectType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates/publish/{id}": {
            "post": {
                "tags": ["templates-controller"],
                "summary": "Publish the current staging version of the template and all of its zones. They will appear in the published view of the templating service. This will publish the current version even if the template itself is not dirty. If the template is marked for deletion, this will instead delete the template and any newly-orphaned zones. Returns the new data of the staging template after publishing, or 204 NO CONTENT if it was deleted.",
                "operationId": "publishUsingPOST",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The template ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResponseEntity"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates/status": {
            "get": {
                "tags": ["templates-controller"],
                "summary": "getStatus",
                "operationId": "getStatusUsingGET",
                "produces": ["*/*"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/templates/{id}": {
            "get": {
                "tags": ["templates-controller"],
                "summary": "Get the entity as JSON by unique ID",
                "operationId": "getEntityUsingGET",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The entity ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": ["templates-controller"],
                "summary": "Update a template from JSON. This will make the template dirty, and the changes can be published using the publish endpoint. If any zones are removed from the template and no longer exist in any template, they will be considered as orphans and deleted. Operation will fail if any zones referenced in the updated template do not exist.",
                "operationId": "updateEntityRESTUsingPUT",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "An updated template serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/TemplateReq"
                    }
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The template ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": ["templates-controller"],
                "summary": "Mark the template for deletion. The template will actually be deleted when published after being marked for deletion, even if the template has never been published prior to deletion. The new state of the template will be returned.",
                "operationId": "deleteEntityRESTUsingDELETE",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The template ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/templates/{id}/_force": {
            "delete": {
                "tags": ["templates-controller"],
                "summary": "Deletes the entity immediately (no marking for deletion) without any other side effects. Does not perform any additional logic such as removing a deleted zone from any templates it was in or deleting orphaned zones. This is only intended to be used during app deletion and may produce unexpected behavior if used in other situations.",
                "operationId": "forceDeleteRESTUsingDELETE",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The entity ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TemplateRes"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/trigger/{app}": {
            "get": {
                "tags": ["trigger-controller"],
                "summary": "Retrieve the template that should trigger for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates.",
                "description": "navigation state is determined by the query terms (q) and filters (fq) in the query params.",
                "operationId": "triggerUsingGET",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "params",
                    "in": "query",
                    "description": "Query parameters",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "showInactive",
                    "in": "query",
                    "description": "Legacy. Same as staging parameter. Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "staging",
                    "in": "query",
                    "description": "Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "templateTypes",
                    "in": "query",
                    "description": "Comma-separated list of template types, indicating which possible types of templates to trigger (e.g. landing, item-detail...)",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi",
                    "default": "landing"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriggerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": ["trigger-controller"],
                "summary": "Retrieve the template for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates.",
                "description": "navigation state is determined by the query terms (q) and filters (fq) in the query params.",
                "operationId": "triggerWithPostUsingPOST",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "name": "templateTypes",
                    "in": "formData",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi"
                }, {
                    "name": "showInactive",
                    "in": "formData",
                    "required": false,
                    "type": "boolean"
                }, {
                    "name": "staging",
                    "in": "formData",
                    "required": false,
                    "type": "boolean"
                }, {
                    "in": "body",
                    "name": "params",
                    "description": "Query parameters",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriggerResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/triggerDSL/{app}": {
            "post": {
                "tags": ["trigger-controller"],
                "summary": "Retrieve the template for the given navigation state. By default will only trigger published versions of templates, specify staging=true to instead trigger staging versions of templates.",
                "description": "navigation state is determined by the userQuery (for the search terms) and the filters from the DSL request (for the filter values).",
                "operationId": "triggerWithDslUsingPOST",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "app",
                    "in": "path",
                    "description": "app",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "dslRequest",
                    "description": "DSL request",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/DslRequest"
                    }
                }, {
                    "name": "requestParams",
                    "in": "query",
                    "description": "Request parameters (for fqs)",
                    "required": true,
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "staging",
                    "in": "query",
                    "description": "Triggers staging templates instead of published templates when true.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "templateTypes",
                    "in": "query",
                    "description": "Comma-separated list of template types, indicating which possible types of templates to trigger (e.g. landing, item-detail...)",
                    "required": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi",
                    "default": "landing"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TriggerResponse"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones": {
            "get": {
                "tags": ["zones-controller"],
                "summary": "Get all entities with optional params to filter the results. Each entity can have both a staging and published version, and the staging version is marked dirty if there are changes needing publication. The default behavior displays only the staging version of entities.  Setting hideStaging=true will exclude the staging version of entities from the response.  The context parameter filters entities based on which app they are part of by specifying, for example, app:SomeApp. Any other comma-separated contexts in the context parameter are allowed but ignored.",
                "operationId": "getAllEntitiesRESTUsingGET_1",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "hideStaging",
                    "in": "query",
                    "description": "if true, will exclude the staging version of entities in the response.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "showDirtyOnly",
                    "in": "query",
                    "description": "if true, will only show staging entities marked as dirty (will not show published entities).",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }, {
                    "name": "showPublished",
                    "in": "query",
                    "description": "if true, will include the published version of entities in the response.",
                    "required": false,
                    "type": "boolean",
                    "default": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ZoneRes"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "post": {
                "tags": ["zones-controller"],
                "summary": "Create a new zone from JSON. This zone will initially be dirty and unpublished and can be published by publishing one of the templates it lives in.",
                "operationId": "createEntityRESTUsingPOST_1",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "A new zone serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/ZoneReq"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones/_import": {
            "post": {
                "tags": ["zones-controller"],
                "summary": "For internal use only. Import the entity from existing app. Same as the normal POST / create endpoint, but dirty flag / publish status will be preserved. Only to be used for imports / upgrades.",
                "operationId": "importEntityRESTUsingPOST_1",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "Existing entity serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/ZoneReq"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones/_schema": {
            "get": {
                "tags": ["zones-controller"],
                "summary": "Get JSON schema for objects managed by this API",
                "operationId": "getEntitySchemaUsingGET_1",
                "produces": ["application/json;qs=0.9", "application/schema+json;qs=1.0"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ObjectType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones/status": {
            "get": {
                "tags": ["zones-controller"],
                "summary": "getStatus",
                "operationId": "getStatusUsingGET_1",
                "produces": ["*/*"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones/uiTreatments": {
            "get": {
                "tags": ["zones-controller"],
                "summary": "Lists all the different values used in the UI Treatment fields of zones.",
                "operationId": "getUITreatmentsRESTUsingGET",
                "produces": ["*/*"],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/zones/{id}": {
            "get": {
                "tags": ["zones-controller"],
                "summary": "Get the entity as JSON by unique ID",
                "operationId": "getEntityUsingGET_1",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The entity ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": ["zones-controller"],
                "summary": "Update a zone from JSON. This will make the zone dirty, and the changes can be published using the publish endpoint.",
                "operationId": "updateEntityRESTUsingPUT_1",
                "consumes": ["application/json"],
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "entity",
                    "description": "An updated zone serialized to JSON",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/ZoneReq"
                    }
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The zone ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneRes"
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": ["zones-controller"],
                "summary": "Delete a zone by unique ID. After successful deletion, this operation will then attempt to remove the zone from any templates that contain it, returning a 500 if any of the removals failed.",
                "operationId": "deleteEntityRESTUsingDELETE_1",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The entity ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ResponseEntity"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/zones/{id}/_force": {
            "delete": {
                "tags": ["zones-controller"],
                "summary": "Deletes the entity immediately (no marking for deletion) without any other side effects. Does not perform any additional logic such as removing a deleted zone from any templates it was in or deleting orphaned zones. This is only intended to be used during app deletion and may produce unexpected behavior if used in other situations.",
                "operationId": "forceDeleteRESTUsingDELETE_1",
                "produces": ["*/*"],
                "parameters": [{
                    "name": "context",
                    "in": "query",
                    "description": "context",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "id",
                    "in": "path",
                    "description": "The entity ID",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ZoneRes"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        }
    },
    "definitions": {
        "AnyType": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "categoryPriority": {
                    "type": "integer",
                    "format": "int32"
                },
                "default": {
                    "type": "object"
                },
                "description": {
                    "type": "string"
                },
                "enum": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "object"
                    }
                },
                "hints": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "oneOf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnyType«object,object»"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": ["array", "boolean", "integer", "null", "number", "object", "ref", "string"]
                },
                "unsafe": {
                    "type": "boolean"
                }
            },
            "title": "AnyType"
        },
        "AnyType«object,object»": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "categoryPriority": {
                    "type": "integer",
                    "format": "int32"
                },
                "default": {
                    "type": "object"
                },
                "description": {
                    "type": "string"
                },
                "enum": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "object"
                    }
                },
                "hints": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "oneOf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnyType«object,object»"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": ["array", "boolean", "integer", "null", "number", "object", "ref", "string"]
                },
                "unsafe": {
                    "type": "boolean"
                }
            },
            "title": "AnyType«object,object»"
        },
        "BoostByValue": {
            "type": "object",
            "properties": {
                "boosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyAndBoost"
                    }
                },
                "field": {
                    "type": "string"
                }
            },
            "title": "BoostByValue"
        },
        "BoostQuery": {
            "type": "object",
            "properties": {
                "boost": {
                    "type": "number",
                    "format": "double"
                },
                "query": {
                    "$ref": "#/definitions/Query"
                },
                "type": {
                    "type": "string"
                }
            },
            "title": "BoostQuery"
        },
        "DslRequest": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "object"
                },
                "facets": {
                    "$ref": "#/definitions/Facets"
                },
                "params": {
                    "type": "object"
                },
                "queryDefinition": {
                    "$ref": "#/definitions/QueryDefinition"
                },
                "results": {
                    "$ref": "#/definitions/Results"
                }
            },
            "title": "DslRequest"
        },
        "FacetDomain": {
            "type": "object",
            "properties": {
                "additionalFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Query"
                    }
                },
                "excludedFiltersByName": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "FacetDomain"
        },
        "FacetField": {
            "type": "object",
            "properties": {
                "domain": {
                    "$ref": "#/definitions/FacetDomain"
                },
                "ensuredValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "minCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "missing": {
                    "type": "boolean"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "prefix": {
                    "type": "string"
                },
                "sort": {
                    "type": "string",
                    "enum": ["count", "index"]
                }
            },
            "title": "FacetField"
        },
        "FacetRange": {
            "type": "object",
            "properties": {
                "domain": {
                    "$ref": "#/definitions/FacetDomain"
                },
                "end": {
                    "type": "string"
                },
                "field": {
                    "type": "string"
                },
                "gap": {
                    "type": "string"
                },
                "hardEnd": {
                    "type": "boolean"
                },
                "include": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": ["all", "edge", "lower", "outer", "upper"]
                    }
                },
                "minCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "other": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": ["after", "all", "before", "between", "non"]
                    }
                },
                "start": {
                    "type": "string"
                }
            },
            "title": "FacetRange"
        },
        "Facets": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FacetField"
                    }
                },
                "groupFacets": {
                    "type": "boolean"
                },
                "groupingMethod": {
                    "type": "string",
                    "enum": ["header_doc", "unique"]
                },
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FacetRange"
                    }
                }
            },
            "title": "Facets"
        },
        "Group": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "leaderStrategy": {
                    "$ref": "#/definitions/GroupLeaderStrategy"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SortElement"
                    }
                }
            },
            "title": "Group"
        },
        "GroupLeaderStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "title": "GroupLeaderStrategy"
        },
        "Highlight": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32"
                },
                "defaultHighlight": {
                    "type": "boolean"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "length": {
                    "type": "integer",
                    "format": "int32"
                },
                "post": {
                    "type": "string"
                },
                "pre": {
                    "type": "string"
                }
            },
            "title": "Highlight"
        },
        "KeyAndBoost": {
            "type": "object",
            "properties": {
                "boost": {
                    "type": "number",
                    "format": "double"
                },
                "key": {
                    "type": "string"
                }
            },
            "title": "KeyAndBoost"
        },
        "KeyAndValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "KeyAndValue"
        },
        "KeyAndValueReq": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "KeyAndValueReq"
        },
        "KeyAndValueRes": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "KeyAndValueRes"
        },
        "NamedFilter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Query"
                }
            },
            "title": "NamedFilter"
        },
        "ObjectType": {
            "type": "object",
            "properties": {
                "additionalProperties": {
                    "type": "object"
                },
                "category": {
                    "type": "string"
                },
                "categoryPriority": {
                    "type": "integer",
                    "format": "int32"
                },
                "default": {
                    "type": "object"
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AnyType"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enum": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "object"
                    }
                },
                "hints": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "maxProperties": {
                    "type": "integer",
                    "format": "int32"
                },
                "minProperties": {
                    "type": "integer",
                    "format": "int32"
                },
                "oneOf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnyType«object,object»"
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AnyType"
                    }
                },
                "propertyGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PropertyGroup"
                    }
                },
                "required": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": ["array", "boolean", "integer", "null", "number", "object", "ref", "string"]
                },
                "unsafe": {
                    "type": "boolean"
                }
            },
            "title": "ObjectType"
        },
        "PropertyGroup": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "PropertyGroup"
        },
        "Query": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "title": "Query"
        },
        "QueryDefinition": {
            "type": "object",
            "properties": {
                "boostsByQuery": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoostQuery"
                    }
                },
                "boostsByValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoostByValue"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Query"
                    }
                },
                "groupedFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Query"
                    }
                },
                "groupedQuery": {
                    "$ref": "#/definitions/Query"
                },
                "main": {
                    "$ref": "#/definitions/Query"
                },
                "namedFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NamedFilter"
                    }
                },
                "userQuery": {
                    "type": "string"
                }
            },
            "title": "QueryDefinition"
        },
        "RenderResponse": {
            "type": "object",
            "properties": {
                "rendered": {
                    "type": "array",
                    "description": "rendered zones",
                    "items": {
                        "$ref": "#/definitions/RenderedZone"
                    }
                },
                "templateId": {
                    "type": "string",
                    "description": "ID of the triggered template containing the rendered zones"
                }
            },
            "title": "RenderResponse",
            "description": "response from the render endpoint, holds the result of rendering all zones"
        },
        "RenderedZone": {
            "type": "object",
            "properties": {
                "render": {
                    "type": "object",
                    "description": "rendered representation of the zone (schema depends on underlying query profile that was queried)"
                },
                "zone": {
                    "description": "zone configuration",
                    "$ref": "#/definitions/Zone"
                }
            },
            "title": "RenderedZone",
            "description": "A rendered zone with its accompanying zone configuration. Schema of the rendered data depends on the underlying query profile that the zone queried."
        },
        "ResponseEntity": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object"
                },
                "statusCode": {
                    "type": "string",
                    "enum": ["ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED", "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND", "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED", "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR", "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE", "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES", "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION", "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT", "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT", "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED", "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT", "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY", "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY", "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY", "VARIANT_ALSO_NEGOTIATES"]
                },
                "statusCodeValue": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "title": "ResponseEntity"
        },
        "Results": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group": {
                    "$ref": "#/definitions/Group"
                },
                "highlight": {
                    "$ref": "#/definitions/Highlight"
                },
                "includeRawResponse": {
                    "type": "boolean"
                },
                "returnScore": {
                    "type": "boolean"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SortElement"
                    }
                },
                "start": {
                    "type": "integer",
                    "format": "int64"
                }
            },
            "title": "Results"
        },
        "SortElement": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string",
                    "enum": ["asc", "desc"]
                },
                "query": {
                    "$ref": "#/definitions/Query"
                },
                "type": {
                    "type": "string",
                    "enum": ["expression", "field", "query", "relevancy"]
                },
                "value": {
                    "type": "string"
                }
            },
            "title": "SortElement"
        },
        "TemplateReq": {
            "type": "object",
            "required": ["app", "id"],
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If true (defaults to false), this template will match at all nav states (triggers will be ignored)."
                },
                "app": {
                    "type": "string",
                    "description": "App this template lives in."
                },
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to itself or any dirty zones which have not yet been published."
                },
                "dirtyZoneIds": {
                    "type": "array",
                    "description": "Read only. IDs of the zones in this template that are dirty.",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable before this time."
                },
                "entityDirty": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "markedForDeletion": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has been marked for deletion but the deletion has not yet been published. If marked for deletion, the template will be actually deleted upon being published."
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this template, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this template has never been published (no published version of the template exists)."
                },
                "priority": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Used when multiple templates trigger in a given nav state - higher number means higher precedence. For example, a template with precedence of 10 will trigger before a template with precedence of 3."
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable after this time."
                },
                "templateDirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to its own fields which have not yet been published. This is independent of any contained zones being dirty - it will be false if there are no changes to this template's fields but some of the contained zones are themselves dirty."
                },
                "triggers": {
                    "type": "array",
                    "description": "Triggers - only one trigger needs to be satisfied in order for this template to trigger.",
                    "items": {
                        "$ref": "#/definitions/TriggerReq"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of this template, an arbitrary value classifying the template. During triggering/rendering, the desired possible types of templates to trigger are specified in the request and compared against this field. Currently it is intended that this value is only set by the PM UI."
                },
                "zoneIds": {
                    "type": "array",
                    "description": "IDs of the zones in this template in the order they should appear.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "TemplateReq",
            "description": "Ordered list of zones with associated trigger criteria."
        },
        "TemplateRes": {
            "type": "object",
            "required": ["app", "id"],
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If true (defaults to false), this template will match at all nav states (triggers will be ignored)."
                },
                "app": {
                    "type": "string",
                    "description": "App this template lives in."
                },
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to itself or any dirty zones which have not yet been published."
                },
                "dirtyZoneIds": {
                    "type": "array",
                    "description": "Read only. IDs of the zones in this template that are dirty.",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable before this time."
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "markedForDeletion": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has been marked for deletion but the deletion has not yet been published. If marked for deletion, the template will be actually deleted upon being published."
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this template, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this template has never been published (no published version of the template exists)."
                },
                "priority": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Used when multiple templates trigger in a given nav state - higher number means higher precedence. For example, a template with precedence of 10 will trigger before a template with precedence of 3."
                },
                "published": {
                    "type": "boolean",
                    "description": "Read only. True if this is the published version of this template."
                },
                "staging": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template."
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable after this time."
                },
                "templateDirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to its own fields which have not yet been published. This is independent of any contained zones being dirty - it will be false if there are no changes to this template's fields but some of the contained zones are themselves dirty."
                },
                "triggers": {
                    "type": "array",
                    "description": "Triggers - only one trigger needs to be satisfied in order for this template to trigger.",
                    "items": {
                        "$ref": "#/definitions/TriggerRes"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of this template, an arbitrary value classifying the template. During triggering/rendering, the desired possible types of templates to trigger are specified in the request and compared against this field. Currently it is intended that this value is only set by the PM UI."
                },
                "zoneIds": {
                    "type": "array",
                    "description": "IDs of the zones in this template in the order they should appear.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "title": "TemplateRes",
            "description": "Ordered list of zones with associated trigger criteria."
        },
        "TemplateWithZones": {
            "type": "object",
            "required": ["app", "id"],
            "properties": {
                "all": {
                    "type": "boolean",
                    "description": "If true (defaults to false), this template will match at all nav states (triggers will be ignored)."
                },
                "app": {
                    "type": "string",
                    "description": "App this template lives in."
                },
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to itself or any dirty zones which have not yet been published."
                },
                "dirtyZoneIds": {
                    "type": "array",
                    "description": "Read only. IDs of the zones in this template that are dirty.",
                    "items": {
                        "type": "string"
                    }
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable before this time."
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "markedForDeletion": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has been marked for deletion but the deletion has not yet been published. If marked for deletion, the template will be actually deleted upon being published."
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this template, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this template has never been published (no published version of the template exists)."
                },
                "priority": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Used when multiple templates trigger in a given nav state - higher number means higher precedence. For example, a template with precedence of 10 will trigger before a template with precedence of 3."
                },
                "published": {
                    "type": "boolean",
                    "description": "Read only. True if this is the published version of this template."
                },
                "staging": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template."
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Template will only be triggerable after this time."
                },
                "templateDirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes to its own fields which have not yet been published. This is independent of any contained zones being dirty - it will be false if there are no changes to this template's fields but some of the contained zones are themselves dirty."
                },
                "triggers": {
                    "type": "array",
                    "description": "Triggers - only one trigger needs to be satisfied in order for this template to trigger.",
                    "items": {
                        "$ref": "#/definitions/Trigger"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of this template, an arbitrary value classifying the template. During triggering/rendering, the desired possible types of templates to trigger are specified in the request and compared against this field. Currently it is intended that this value is only set by the PM UI."
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Zone"
                    }
                }
            },
            "title": "TemplateWithZones",
            "description": "Ordered list of zones with associated trigger criteria."
        },
        "Trigger": {
            "type": "object",
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "If true (defaults to false), the nav state must match exactly this trigger's criteria - i.e. if true, no extra filters are allowed, and no search terms are allowed if this trigger has none defined. Not to be confused with 'exact' match mode which specifically defines the search term matching logic."
                },
                "filters": {
                    "type": "array",
                    "description": "Filters (fq) values required in the query for this trigger to match. Additional filters may be present in the query (and still satisfy this trigger) unless 'exact: true' is specified for this trigger, in which case the filters in the query must exactly match the filters in this trigger, no more and no less.",
                    "items": {
                        "$ref": "#/definitions/KeyAndValue"
                    }
                },
                "matchMode": {
                    "type": "string",
                    "description": "Defines search terms matching criteria. 'phrase' (the default) requires the search tokens of this trigger to exist as a phrase within the search terms of the query, in the same order. 'all' requires the search tokens of this trigger to exist within the search terms of the query in any order. 'exact' requires that the search tokens in this trigger exactly match the search tokens in the query, in the same order. As with all match modes, 'exact' still applies the configured analysis, such as stemming, so singular / plural forms will be considered identical despite not being 'exactly' the same.",
                    "enum": ["all", "exact", "phrase"]
                },
                "search": {
                    "type": "string",
                    "description": "Search terms required in the query for this trigger to match. The configured analysis will be applied to tokenize and process these terms."
                }
            },
            "title": "Trigger",
            "description": "An individual trigger criteria for a template. All the conditions indicated in the trigger must be satisfied for the trigger to be a match on a particular nav state. A trigger consists of search (q) and filter (fq) criteria."
        },
        "TriggerReq": {
            "type": "object",
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "If true (defaults to false), the nav state must match exactly this trigger's criteria - i.e. if true, no extra filters are allowed, and no search terms are allowed if this trigger has none defined. Not to be confused with 'exact' match mode which specifically defines the search term matching logic."
                },
                "filters": {
                    "type": "array",
                    "description": "Filters (fq) values required in the query for this trigger to match. Additional filters may be present in the query (and still satisfy this trigger) unless 'exact: true' is specified for this trigger, in which case the filters in the query must exactly match the filters in this trigger, no more and no less.",
                    "items": {
                        "$ref": "#/definitions/KeyAndValueReq"
                    }
                },
                "matchMode": {
                    "type": "string",
                    "description": "Defines search terms matching criteria. 'phrase' (the default) requires the search tokens of this trigger to exist as a phrase within the search terms of the query, in the same order. 'all' requires the search tokens of this trigger to exist within the search terms of the query in any order. 'exact' requires that the search tokens in this trigger exactly match the search tokens in the query, in the same order. As with all match modes, 'exact' still applies the configured analysis, such as stemming, so singular / plural forms will be considered identical despite not being 'exactly' the same.",
                    "enum": ["all", "exact", "phrase"]
                },
                "search": {
                    "type": "string",
                    "description": "Search terms required in the query for this trigger to match. The configured analysis will be applied to tokenize and process these terms."
                }
            },
            "title": "TriggerReq",
            "description": "An individual trigger criteria for a template. All the conditions indicated in the trigger must be satisfied for the trigger to be a match on a particular nav state. A trigger consists of search (q) and filter (fq) criteria."
        },
        "TriggerRes": {
            "type": "object",
            "properties": {
                "exact": {
                    "type": "boolean",
                    "description": "If true (defaults to false), the nav state must match exactly this trigger's criteria - i.e. if true, no extra filters are allowed, and no search terms are allowed if this trigger has none defined. Not to be confused with 'exact' match mode which specifically defines the search term matching logic."
                },
                "filters": {
                    "type": "array",
                    "description": "Filters (fq) values required in the query for this trigger to match. Additional filters may be present in the query (and still satisfy this trigger) unless 'exact: true' is specified for this trigger, in which case the filters in the query must exactly match the filters in this trigger, no more and no less.",
                    "items": {
                        "$ref": "#/definitions/KeyAndValueRes"
                    }
                },
                "matchMode": {
                    "type": "string",
                    "description": "Defines search terms matching criteria. 'phrase' (the default) requires the search tokens of this trigger to exist as a phrase within the search terms of the query, in the same order. 'all' requires the search tokens of this trigger to exist within the search terms of the query in any order. 'exact' requires that the search tokens in this trigger exactly match the search tokens in the query, in the same order. As with all match modes, 'exact' still applies the configured analysis, such as stemming, so singular / plural forms will be considered identical despite not being 'exactly' the same.",
                    "enum": ["all", "exact", "phrase"]
                },
                "search": {
                    "type": "string",
                    "description": "Search terms required in the query for this trigger to match. The configured analysis will be applied to tokenize and process these terms."
                }
            },
            "title": "TriggerRes",
            "description": "An individual trigger criteria for a template. All the conditions indicated in the trigger must be satisfied for the trigger to be a match on a particular nav state. A trigger consists of search (q) and filter (fq) criteria."
        },
        "TriggerResponse": {
            "type": "object",
            "properties": {
                "triggered": {
                    "description": "triggered template (if any)",
                    "$ref": "#/definitions/TemplateWithZones"
                }
            },
            "title": "TriggerResponse",
            "description": "response from the trigger endpoint, holds the triggered template (if any)"
        },
        "Zone": {
            "type": "object",
            "required": ["id", "queryProfile"],
            "properties": {
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes which have not yet been published."
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "inTemplates": {
                    "type": "array",
                    "description": "Read only. IDs of the templates this zone appears in, in no particular order",
                    "items": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this zone, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this zone has never been published (no published version of the zone exists)."
                },
                "omitFilters": {
                    "type": "boolean",
                    "description": "Normally, when a template is being rendered, all query parameters in the original request are passed on to the defined query profile. Enabling this setting causes all filters (fq parameters) from the original request to be omitted from the query to the query profile. For example, if you have a category landing page where the category is used to filter the displayed items, this setting can allow a zone to display items outside of that category (by omitting the category filter)."
                },
                "published": {
                    "type": "boolean",
                    "description": "Read only. True if this is the published version of this zone."
                },
                "queryProfile": {
                    "type": "string",
                    "description": "Query profile to query when rendering. When rendering, all parameters from the request will be passed on to this profile."
                },
                "staging": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this zone."
                },
                "tags": {
                    "type": "array",
                    "description": "Tags to pass to query profile when rendering. Will be combined with tags present in the request parameters of the render request.",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of zone, an arbitrary value classifying the zone. Has no effect on triggering/rendering logic. Intended only to be used by the PM UI."
                },
                "uiTreatment": {
                    "type": "string",
                    "description": "Arbitrary text included in the response when rendering this zone.  Can be used to allow additional influence over how this zone is displayed or processed on your frontend. This only has an effect if your frontend has been developed to utilize this field. Thus, you will need to know what the possible values are and what effect they have on your frontend."
                }
            },
            "title": "Zone",
            "description": "Zone config, simply defining which query profile to query when rendering the zone.  Additional arbitrary properties which are not part of the schema are allowed and will be included in the response when rendering the zone, which could be used for things like frontend rendering logic. These extra properties will not affect template rendering logic in any way."
        },
        "ZoneReq": {
            "type": "object",
            "required": ["id", "queryProfile"],
            "properties": {
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes which have not yet been published."
                },
                "entityDirty": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "inTemplates": {
                    "type": "array",
                    "description": "Read only. IDs of the templates this zone appears in, in no particular order",
                    "items": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this zone, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this zone has never been published (no published version of the zone exists)."
                },
                "omitFilters": {
                    "type": "boolean",
                    "description": "Normally, when a template is being rendered, all query parameters in the original request are passed on to the defined query profile. Enabling this setting causes all filters (fq parameters) from the original request to be omitted from the query to the query profile. For example, if you have a category landing page where the category is used to filter the displayed items, this setting can allow a zone to display items outside of that category (by omitting the category filter)."
                },
                "queryProfile": {
                    "type": "string",
                    "description": "Query profile to query when rendering. When rendering, all parameters from the request will be passed on to this profile."
                },
                "tags": {
                    "type": "array",
                    "description": "Tags to pass to query profile when rendering. Will be combined with tags present in the request parameters of the render request.",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of zone, an arbitrary value classifying the zone. Has no effect on triggering/rendering logic. Intended only to be used by the PM UI."
                },
                "uiTreatment": {
                    "type": "string",
                    "description": "Arbitrary text included in the response when rendering this zone.  Can be used to allow additional influence over how this zone is displayed or processed on your frontend. This only has an effect if your frontend has been developed to utilize this field. Thus, you will need to know what the possible values are and what effect they have on your frontend."
                }
            },
            "title": "ZoneReq",
            "description": "Zone config, simply defining which query profile to query when rendering the zone.  Additional arbitrary properties which are not part of the schema are allowed and will be included in the response when rendering the zone, which could be used for things like frontend rendering logic. These extra properties will not affect template rendering logic in any way."
        },
        "ZoneRes": {
            "type": "object",
            "required": ["id", "queryProfile"],
            "properties": {
                "dirty": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this template and it has changes which have not yet been published."
                },
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "inTemplates": {
                    "type": "array",
                    "description": "Read only. IDs of the templates this zone appears in, in no particular order",
                    "items": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "description": "Extra arbitrary metadata associated with this zone, for things like PM UI data."
                },
                "name": {
                    "type": "string",
                    "description": "Display Name"
                },
                "neverPublished": {
                    "type": "boolean",
                    "description": "Read only. True if this zone has never been published (no published version of the zone exists)."
                },
                "omitFilters": {
                    "type": "boolean",
                    "description": "Normally, when a template is being rendered, all query parameters in the original request are passed on to the defined query profile. Enabling this setting causes all filters (fq parameters) from the original request to be omitted from the query to the query profile. For example, if you have a category landing page where the category is used to filter the displayed items, this setting can allow a zone to display items outside of that category (by omitting the category filter)."
                },
                "published": {
                    "type": "boolean",
                    "description": "Read only. True if this is the published version of this zone."
                },
                "queryProfile": {
                    "type": "string",
                    "description": "Query profile to query when rendering. When rendering, all parameters from the request will be passed on to this profile."
                },
                "staging": {
                    "type": "boolean",
                    "description": "Read only. True if this is the staging version of this zone."
                },
                "tags": {
                    "type": "array",
                    "description": "Tags to pass to query profile when rendering. Will be combined with tags present in the request parameters of the render request.",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of zone, an arbitrary value classifying the zone. Has no effect on triggering/rendering logic. Intended only to be used by the PM UI."
                },
                "uiTreatment": {
                    "type": "string",
                    "description": "Arbitrary text included in the response when rendering this zone.  Can be used to allow additional influence over how this zone is displayed or processed on your frontend. This only has an effect if your frontend has been developed to utilize this field. Thus, you will need to know what the possible values are and what effect they have on your frontend."
                }
            },
            "title": "ZoneRes",
            "description": "Zone config, simply defining which query profile to query when rendering the zone.  Additional arbitrary properties which are not part of the schema are allowed and will be included in the response when rendering the zone, which could be used for things like frontend rendering logic. These extra properties will not affect template rendering logic in any way."
        }
    }
}