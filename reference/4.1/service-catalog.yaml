---
swagger: "2.0"
info:
  version: "4.1.3"
  title: "Fusion Service catalog"
basePath: "/api/apollo"
tags:
- name: "catalog"
schemes:
- "http"
paths:
  /catalog:
    get:
      summary: "Get a list of analytics projects"
      description: ""
      operationId: "getProjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DataAsset"
    post:
      summary: "Create a new analytics project"
      description: ""
      operationId: "createProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/DataAsset"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataAsset"
  /catalog/_schema:
    get:
      summary: "Get the JSON schema for creating a data asset"
      description: ""
      operationId: "getDataAssetSchema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectType"
  /catalog/_search:
    get:
      summary: "Search for data assets of interest across all projects"
      description: "Results are filtered by permissions of the requesting user; query\
        \ parameters are used to specify filters"
      operationId: "findAssets"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DataAsset"
  /catalog/status:
    get:
      summary: "Get the status of the service"
      description: ""
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceStatus"
  /catalog/{project}:
    get:
      summary: "Get details about an analytics project"
      description: ""
      operationId: "getProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataAsset"
    delete:
      summary: "Delete a project and all of its data assets"
      description: ""
      operationId: "deleteProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /catalog/{project}/assets:
    get:
      summary: "Get a list of assets in a project"
      description: ""
      operationId: "getAssetsForProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DataAsset"
    post:
      summary: "Create a new data asset in a project"
      description: ""
      operationId: "createAsset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/DataAsset"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataAsset"
  /catalog/{project}/assets/{asset}:
    get:
      summary: "Get details for a data asset in a project"
      description: ""
      operationId: "getAsset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        description: "The name of an asset"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataAsset"
    put:
      summary: "Update a data asset in a project"
      description: ""
      operationId: "updateAsset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        description: "The name of an asset"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/DataAsset"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataAsset"
    delete:
      summary: "Remove a data asset from a project"
      description: ""
      operationId: "deleteAsset"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        description: "The name of an asset"
        required: true
        type: "string"
      - name: "version"
        in: "query"
        description: "The asset version to delete, for optimistic concurrency control"
        required: false
        type: "integer"
        format: "int64"
      responses:
        default:
          description: "successful operation"
  /catalog/{project}/assets/{asset}/columns/{column}:
    get:
      summary: "Explore facets and basic summary stats for a field in this asset"
      description: ""
      operationId: "getColumnInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        description: "The name of an asset"
        required: true
        type: "string"
      - name: "column"
        in: "path"
        description: "The name of a column in the table"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ColumnInfo"
  /catalog/{project}/assets/{asset}/count:
    get:
      summary: "Count the number of rows in the table backed by this asset"
      description: ""
      operationId: "getCount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CatalogQueryResults"
  /catalog/{project}/assets/{asset}/rows:
    get:
      summary: "Get the top N rows from the table backed by this asset"
      description: ""
      operationId: "getRows"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CatalogQueryResults"
  /catalog/{project}/assets/{asset}/schema:
    get:
      summary: "Get schema information about a data asset in a project"
      description: ""
      operationId: "getAssetSchema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        required: true
        type: "string"
      - name: "asset"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectType"
  /catalog/{project}/query:
    post:
      summary: "Execute a SQL query, Solr query, or streaming expression against one\
        \ or more assets of a project"
      description: ""
      operationId: "executeQuery"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project"
        in: "path"
        description: "The name of a project"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted query parameters"
        required: false
        schema:
          $ref: "#/definitions/CatalogQuery"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CatalogQueryResults"
definitions:
  PropertyGroup:
    type: "object"
    properties:
      label:
        type: "string"
      properties:
        type: "array"
        items:
          type: "string"
  DataAsset:
    type: "object"
    properties:
      id:
        type: "string"
      assetType:
        type: "string"
        enum:
        - "project"
        - "table"
        - "view"
        - "field"
        - "udf"
        - "metric"
      createdOn:
        type: "string"
        format: "date-time"
      updatedOn:
        type: "string"
      version:
        type: "integer"
        format: "int64"
      projectId:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      sourceUri:
        type: "string"
      owner:
        type: "string"
      ownerEmail:
        type: "string"
      tags:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      format:
        type: "string"
      options:
        type: "array"
        items:
          type: "string"
      filters:
        type: "array"
        items:
          type: "string"
      sql:
        type: "string"
      cacheOnLoad:
        type: "boolean"
        default: false
      cacheStrategy:
        $ref: "#/definitions/CacheStrategy"
      dependsOn:
        type: "array"
        items:
          type: "string"
      additionalSettings:
        type: "object"
        additionalProperties:
          type: "object"
      optionsMap:
        type: "object"
        additionalProperties:
          type: "string"
  CatalogQueryResults:
    type: "object"
  ColumnInfo:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        type: "string"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      facets:
        type: "object"
        additionalProperties:
          type: "object"
      stats:
        $ref: "#/definitions/ColumnStats"
      pivots:
        type: "object"
        additionalProperties:
          type: "object"
  Annotation:
    type: "object"
  StatusMessage:
    type: "object"
    properties:
      message:
        type: "string"
      date:
        type: "string"
        format: "date-time"
  ObjectType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      maxProperties:
        type: "integer"
        format: "int32"
      minProperties:
        type: "integer"
        format: "int32"
      required:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      properties:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      propertyGroups:
        type: "array"
        items:
          $ref: "#/definitions/PropertyGroup"
      useSchemaGrouping:
        $ref: "#/definitions/UseSchemaGrouping"
      definitions:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
      additionalProperties:
        type: "object"
  CatalogQuery:
    type: "object"
    properties:
      sql:
        type: "string"
      solr:
        type: "string"
      requestHandler:
        type: "string"
      collection:
        type: "string"
      cacheResultsAs:
        type: "string"
      flushCaches:
        type: "boolean"
        default: false
      params:
        type: "object"
        additionalProperties:
          type: "object"
      queryDebugString:
        type: "string"
  Type:
    type: "object"
    properties:
      typeName:
        type: "string"
  AccessibleProperty:
    type: "object"
    properties:
      name:
        type: "string"
      required:
        type: "boolean"
        default: false
      genericType:
        $ref: "#/definitions/Type"
      accessibleObject:
        $ref: "#/definitions/AccessibleObject"
      hidden:
        type: "boolean"
        default: false
  ColumnStats:
    type: "object"
    properties:
      min:
        type: "object"
      max:
        type: "object"
      sum:
        type: "object"
      count:
        type: "integer"
        format: "int64"
      cardinality:
        type: "integer"
        format: "int64"
      missing:
        type: "integer"
        format: "int64"
      mean:
        type: "object"
      sumOfSquares:
        type: "number"
        format: "double"
      stddev:
        type: "number"
        format: "double"
      percentiles:
        type: "object"
        additionalProperties:
          type: "number"
          format: "double"
  ServiceStatus:
    type: "object"
    properties:
      node:
        type: "string"
      status:
        type: "string"
        enum:
        - "starting"
        - "ok"
        - "warning"
        - "error"
        - "shutdown"
      additionalProperties:
        type: "object"
        additionalProperties:
          type: "object"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/StatusMessage"
  AccessibleObject:
    type: "object"
    properties:
      annotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      declaredAnnotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      accessible:
        type: "boolean"
        default: false
  AnyType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  CacheStrategy:
    type: "object"
    properties:
      timeToLive:
        type: "integer"
        format: "int32"
      refreshFrequency:
        type: "integer"
        format: "int32"
      autoRefresh:
        type: "boolean"
        default: false
  AnyTypeObjectObject:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  UseSchemaGrouping:
    type: "object"
