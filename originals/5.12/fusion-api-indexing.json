{
  "openapi": "3.0.1",
  "info": {
    "title": "Fusion Indexing Service API",
    "description": "A Lucidworks Fusion microservice for Indexing.",
    "contact": {
      "name": "Lucidworks",
      "url": "www.lucidworks.com",
      "email": "support@lucidworks.com"
    },
    "license": {
      "name": "License of API",
      "url": "https://lucidworks.com/legal/developer-license-agreement/"
    },
    "version": "5.12.0"
  },
  "externalDocs": {
    "description": "Lucidworks Documentation",
    "url": "https://doc.lucidworks.com/"
  },
  "servers": [
    {
      "url": "FUSION_HOST.com/api/index"
    }
  ],
  "tags": [
    {
      "name": "Index Profiles CRUD API",
      "description": "Endpoints to perform Create-Read-Update-Delete operations on Index Profiles."
    },
    {
      "name": "Index Pipelines API",
      "description": "Used for indexing documents and managing pipeline definitions"
    },
    {
      "name": "Index Stage API",
      "description": "The Index Stages API provides endpoints to: 1) manage index stage instances, 2) list index stage configuration properties"
    },
    {
      "name": "Subscriptions API",
      "description": "The Subscriptions API"
    },
    {
      "name": "Index Profiles API",
      "description": "The Index Profiles API allows users to manage index profiles. Index profiles allow users to change index pipelines during indexing time while pointing the indexing toward a static endpoint. This gives flexibility to test different stage combinations without reconfiguration."
    },
    {
      "name": "Parsers CRUD API",
      "description": "Endpoints to perform Create-Read-Update-Delete operations on Parsers, Deprecated: use async-parsing endpoint instead."
    },
    {
      "name": "Parsers Schema API",
      "description": "Endpoints to get the Schema of Parsers. Deprecated: use async-parsing endpoint instead."
    },
    {
      "name": "Index Stage Plugins API",
      "description": "Provides endpoints to manage index stage plugins."
    }
  ],
  "paths": {
    "/api/v1/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Get any subscriptions associated with the given resource and, optionally, topics",
        "operationId": "getAllEntities_1",
        "parameters": [
          {
            "name": "The subscription resource",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The topics subscribed to by this resource.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Update any subscriptions associated with the given resource and, optionally, topics",
        "operationId": "updateSubscriptions",
        "parameters": [
          {
            "name": "The subscription resource",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The topics subscribed to by this resource. ",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Create new Subscription",
        "operationId": "createEntity",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Delete any subscriptions associated with the given resource and, optionally, topics",
        "operationId": "deleteSubscriptions",
        "parameters": [
          {
            "name": "The subscription resource",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The topics subscribed to by this resource. If an app context is not provided, these topics must include the namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscriptions/{id}": {
      "get": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Update a Subscription from JSON",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "A Subscription version tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscriptions/{id}/refresh": {
      "put": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Refresh the specified subscription",
        "description": "When changes are made to a subscription, the subscription needs to be refreshed (reloaded). A Fusion restart refreshes all subscriptions.",
        "operationId": "refreshSubscription",
        "parameters": [
          {
            "name": "The action to apply when refreshing the subscription. This is currently either start or stop.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "start"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsers/{id}": {
      "get": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntity_1",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_1",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/index-stage-plugins": {
      "get": {
        "tags": [
          "Index Stage Plugins API"
        ],
        "operationId": "getPlugins",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Index Stage Plugins API"
        ],
        "summary": "Install the plugin or update if exists.",
        "operationId": "installOrUpdatePlugin",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/index-stage-plugins/{pluginId}/refresh": {
      "put": {
        "tags": [
          "Index Stage Plugins API"
        ],
        "summary": "Reload the plugin.",
        "operationId": "reloadPlugin",
        "parameters": [
          {
            "name": "Broadcast refresh request",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/index-profiles/{id}": {
      "get": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity_2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexProfile"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntity_2",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexProfile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_2",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/{id}": {
      "get": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity_3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineDefinition"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Update pipeline definition",
        "operationId": "updateEntity_3",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexPipelineDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineDefinition"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_3",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/{id}/refresh": {
      "put": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Reload the specified pipeline",
        "description": "When changes are made to a pipeline, the pipeline needs to be refreshed (reloaded). A Fusion restart refreshes all pipelines",
        "operationId": "refreshPipeline",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/{id}/async-enrichment/skip-pending": {
      "put": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Skip all the pending async enrichment requests for this pipeline",
        "description": "Skip all the pending async enrichment requests for this pipeline. Typically used when a pipeline for async enrichment is developed and debugged.",
        "operationId": "skipPendingAsyncRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsers": {
      "get": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Get all entities with optional params to filter the results.",
        "operationId": "getAllEntities",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntity_1",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/index/{id}": {
      "post": {
        "tags": [
          "Index Profiles API"
        ],
        "summary": "Index document and return indexing stats.",
        "description": "The request body should be the document passed as binary data. Indexing means that a document will be processed by all of the configured index stages.",
        "operationId": "indexPipelineDocument_1",
        "parameters": [
          {
            "name": "Run the pipeline in \"simulate\" mode for these docs. Stages with \"side-effects\" will get skipped",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "If true, indexed documents will be returned in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Indicates how many documents should be included in response from the pipeline with -1 implying all.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "Collect pipeline processing stats and return them in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Indicates if the SolrIndexStage should buffer docs or not.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Request query params",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "MIME type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "application/octet-stream"
            }
          },
          {
            "name": "Content resource name (file name) on the source system",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "unknown"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.lucidworks-document": {
              "schema": {
                "type": "object"
              }
            },
            "application/vnd.solr-document": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineStatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index/{id}/debug": {
      "post": {
        "tags": [
          "Index Profiles API"
        ],
        "summary": "Index document and return response with additional debugging info.",
        "description": "The document format must match application/vnd.lucidworks-document or application/vnd.solr-document. ",
        "operationId": "debug",
        "parameters": [
          {
            "name": "Run the pipeline in \"simulate\" mode for these docs. Stages with \"side-effects\" will get skipped",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "If true, indexed documents will be returned in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Indicates how many documents should be included in response from the pipeline with -1 implying all.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "Indicates if the SolrIndexStage should buffer docs or not.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Request query params",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.lucidworks-document": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineDebugResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-profiles": {
      "get": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Get all entities with optional params to filter the results.",
        "operationId": "getAllEntities_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndexProfile"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntity_2",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexProfile"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines": {
      "get": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Get all entities with optional params to filter the results.",
        "operationId": "getAllEntities_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndexPipelineDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Create new index pipeline definition",
        "operationId": "createEntity_3",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \n                                                \"app:SomeApp\". If the entity is not part of the app this request will fail. \n                                                Any other comma-separated contexts in the context parameter are allowed but ignored.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexPipelineDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/{id}/collections/{collection}/index": {
      "post": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "(Deprecated) Index document and return indexing stats.",
        "description": "The request body should be the document passed as binary data. Indexing means that a document will be processed by all of the configured index stages.",
        "operationId": "indexPipelineDocumentNoStats_1_1_1",
        "parameters": [
          {
            "name": "Run the pipeline in \"simulate\" mode for these docs. Stages with \"side-effects\" will get skipped",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "If true, indexed documents will be returned in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Indicates how many documents should be included in response from the pipeline with -1 implying all.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "Indicates if the SolrIndexStage should buffer docs or not.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Indicates if the indexing should proceed if an error is encountered or if it should throw an exception",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Request query params",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          },
          {
            "name": "Collect pipeline processing stats and return them in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Deprecated",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "(Deprecated) Id of the parser to be used. Use async-parser instead.",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string",
              "default": "_system"
            }
          },
          {
            "name": "Skip the parsing and treat document as byte stream",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "MIME type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "application/octet-stream"
            }
          },
          {
            "name": "Content resource name (file name) on the source system",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "unknown"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.lucidworks-document": {
              "schema": {
                "type": "object"
              }
            },
            "application/vnd.solr-document": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.lucidworks-document": {
                "schema": {
                  "type": "object"
                }
              },
              "application/vnd.solr-document": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/{id}/collections/{collection}/debug": {
      "post": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Index document and return response with additional debugging info.",
        "description": "The document format must match application/vnd.lucidworks-document or application/vnd.solr-document. Indexing means that a document will be processed by all of the configured index stages.",
        "operationId": "debugPipelineDocument",
        "parameters": [
          {
            "name": "Run the pipeline in \"simulate\" mode for these docs. Stages with \"side-effects\" will get skipped",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "If true, indexed documents will be returned in the response",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Indicates how many documents should be included in response from the pipeline with -1 implying all.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "Indicates if the SolrIndexStage should buffer docs or not.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Indicates if the indexing should proceed if an error is encountered or if it should throw an exception",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Request query params",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.lucidworks-document": {
              "schema": {
                "type": "object"
              }
            },
            "application/vnd.solr-document": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexPipelineDebugResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/status": {
      "get": {
        "tags": [
          "Indexing System API"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscriptions/status": {
      "get": {
        "tags": [
          "Subscriptions API"
        ],
        "operationId": "getStatus_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscriptions/_schema": {
      "get": {
        "tags": [
          "Subscriptions API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parsers/_schema": {
      "get": {
        "tags": [
          "Parsers Schema API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/index/status": {
      "get": {
        "tags": [
          "Index Profiles API"
        ],
        "operationId": "getStatus_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-stages/status": {
      "get": {
        "tags": [
          "Index Stage API"
        ],
        "operationId": "getStatus_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-stages/schema": {
      "get": {
        "tags": [
          "Index Stage API"
        ],
        "summary": "Get all stage schemas and types",
        "operationId": "listStageSchemas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-stages/schema/{type}": {
      "get": {
        "tags": [
          "Index Stage API"
        ],
        "summary": "Get stage schema of type",
        "operationId": "getStageSchema",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-profiles/status": {
      "get": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "operationId": "getStatus_4",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-profiles/_schema": {
      "get": {
        "tags": [
          "Index Profiles CRUD API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/status": {
      "get": {
        "tags": [
          "Index Pipelines API"
        ],
        "operationId": "getStatus_5",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-pipelines/_schema": {
      "get": {
        "tags": [
          "Index Pipelines API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/index-stage-plugins/{pluginId}": {
      "delete": {
        "tags": [
          "Index Stage Plugins API"
        ],
        "summary": "Uninstall the plugin.",
        "operationId": "uninstallPlugin",
        "parameters": [
          {
            "name": "Broadcast delete request",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SubscriptionUpdate": {
        "type": "object",
        "properties": {
          "numberOfListenerThreads": {
            "type": "integer",
            "format": "int32"
          },
          "maxRetries": {
            "type": "integer",
            "format": "int32"
          },
          "initialPosition": {
            "type": "string"
          },
          "contextProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "numberOfListenerThreads": {
            "type": "integer",
            "format": "int32"
          },
          "maxRetries": {
            "type": "integer",
            "format": "int32"
          },
          "initialPosition": {
            "type": "string"
          },
          "contextProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "IfMatchHeader": {
        "type": "object"
      },
      "IndexProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "indexPipeline": {
            "type": "string"
          },
          "collection": {
            "type": "string"
          },
          "parser": {
            "type": "string"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParamAndValue"
            }
          }
        }
      },
      "ParamAndValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "policy": {
            "type": "string",
            "enum": [
              "replace",
              "append",
              "remove",
              "default"
            ]
          }
        }
      },
      "IndexPipelineDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StageConfig"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StageConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "skip": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MultiValueMapStringString": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Annotation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "features": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "deprecated": true
            },
            "deprecated": true
          },
          "label": {
            "type": "string"
          },
          "featureCount": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          }
        }
      },
      "Command": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IndexPipelineStatResponse": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineDocument"
            }
          },
          "stats": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "PipelineDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineField"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Command"
            }
          },
          "hints": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "PipelineField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Annotation"
            }
          }
        }
      },
      "ContextAndDoc": {
        "type": "object",
        "properties": {
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "error": {
            "type": "string"
          },
          "doc": {
            "$ref": "#/components/schemas/PipelineDocument"
          }
        }
      },
      "IndexPipelineDebugResponse": {
        "type": "object",
        "properties": {
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StageConfig"
            }
          },
          "output": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContextAndDoc"
              }
            }
          },
          "outputEncounteredCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ServiceStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "starting",
              "ok",
              "warning",
              "error",
              "shutdown"
            ]
          },
          "node": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusMessage"
            }
          }
        }
      },
      "ServiceStatusSet": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "items": {
          "$ref": "#/components/schemas/ServiceStatus"
        }
      },
      "StatusMessage": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AnyType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          }
        }
      },
      "AnyTypeObjectObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          }
        }
      },
      "ObjectType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "additionalProperties": {
            "type": "object"
          },
          "minProperties": {
            "type": "integer",
            "format": "int32"
          },
          "maxProperties": {
            "type": "integer",
            "format": "int32"
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "default": {
            "type": "object"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          },
          "propertyGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyGroup"
            }
          }
        }
      },
      "PropertyGroup": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
