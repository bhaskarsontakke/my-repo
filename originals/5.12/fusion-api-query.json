{
  "openapi": "3.0.1",
  "info": {
    "title": "Fusion Query Service API",
    "description": "A Lucidworks Fusion microservice for ML-enhanced ranking and retrieval.",
    "contact": {
      "name": "Lucidworks",
      "url": "www.lucidworks.com",
      "email": "support@lucidworks.com"
    },
    "license": {
      "name": "License of API",
      "url": "https://lucidworks.com/legal/developer-license-agreement/"
    },
    "version": "5.12.0"
  },
  "externalDocs": {
    "description": "Lucidworks Documentation",
    "url": "https://doc.lucidworks.com/"
  },
  "servers": [
    {
      "url": "FUSION_HOST.com/api/query"
    }
  ],
  "tags": [
    {
      "name": "Query Stage Plugins API",
      "description": "Endpoints for managing query stage plugins"
    },
    {
      "name": "Query Profiles API",
      "description": "The Query Profiles API allows users to manage query profiles. Query profiles allow users to change query pipelines during search time while pointing the search toward a static endpoint. This gives flexibility to test different stage combinations without reconfiguration."
    },
    {
      "name": "Query Pipelines API",
      "description": "Endpoints for executing queries and for CRUD operations on query pipelines"
    },
    {
      "name": "Custom Rule Type API",
      "description": "Endpoints to define and manage custom rule type definitions."
    },
    {
      "name": "Experiments API",
      "description": "Use the Experiments API to compare different configuration variants and determine which ones are most successful."
    },
    {
      "name": "Query Profiles CRUD API",
      "description": "Endpoints to perform Create-Read-Update-Delete operations on Query Profiles."
    },
    {
      "name": "Query Stage API",
      "description": "The Query Stages API provides endpoints to manage query stage instances and list query stage configuration properties"
    },
    {
      "name": "Query Rewriting API",
      "description": "Endpoints to manage query rewrites and rules. Query rewriting is a strategy for improving relevancy using AI-generated data. Many of Fusion AI’s features can be used to rewrite incoming queries prior to submitting them to Fusion’s Solr core. These rewrites produce more relevant search results with higher conversion rates. Primarily for internal use."
    },
    {
      "name": "Signal Indexing API",
      "description": "Endpoints to index signals."
    }
  ],
  "paths": {
    "/query-stage-plugins": {
      "get": {
        "tags": [
          "Query Stage Plugins API"
        ],
        "summary": "Retrieve a list of installed plugins",
        "operationId": "getPlugins",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Stage Plugins API"
        ],
        "summary": "Install a new plugin or update an existing one",
        "operationId": "installOrUpdatePlugin",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/query-rewrite/{type}": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Get status information for a specific query rewrite type, such as rules or spell correction",
        "operationId": "getQueryRewriteTypeStatus",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRewriteTypeStatus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Update the enabled status of a query rewrite type",
        "operationId": "updateQueryRewriteTypeEnabled",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRewriteTypeStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRewriteTypeStatus"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/publish": {
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Publish un-deployed query rewrites",
        "operationId": "publish",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Delete un-deployed query rewrites",
        "operationId": "rollback",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/publish/{types}": {
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Publish un-deployed query rewrites with an optional type filter",
        "operationId": "publishType",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/instances": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "List query rewrite instances for an application",
        "operationId": "list",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "An edit session ID filter. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryRewrite"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Create, update or delete multiple objects",
        "operationId": "doBulkOperation",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Whether to check if there will be any update conflicts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Whether to check if there will be any create conflicts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Create a new query rewrite",
        "operationId": "create",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRewrite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRewrite"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/instances/{id}": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Get details for an existing query rewrite",
        "operationId": "getQueryRewrite",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "An edit session ID filter. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRewrite"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Update an existing query rewrite",
        "operationId": "updateQueryRewrite",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRewrite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRewrite"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Delete an existing query rewrite",
        "operationId": "deleteQueryRewrite",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/instances/{id}/publish": {
      "put": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Publish un-deployed query rewrites with specific id",
        "operationId": "publishById",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-profiles/{id}": {
      "get": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProfile"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProfile"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines/{id}": {
      "get": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Get a query pipeline as JSON by unique ID",
        "operationId": "getEntity_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPipelineDefinition"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Update a query pipeline from JSON",
        "operationId": "updateEntity_1",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryPipelineDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPipelineDefinition"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_1",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity_2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntity_2",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_2",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/metrics": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get metrics for all runs of an experiment",
        "operationId": "getMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExperimentMetricResponse"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Recompute metrics based on the results of an experiment",
        "operationId": "recompute",
        "parameters": [
          {
            "name": "Whether to wait for the experiment to finish. If false, metrics are retrieved from the current job status which may be empty if the job has not started yet.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "The maximum time to wait for an experiment to finish in seconds. Only used if sync=true",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 300
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentRecomputeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/custom-rule-types/{id}": {
      "get": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntity_3",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleTypeConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntity_3",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRuleTypeConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleTypeConfig"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntity_3",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/signals/{collection}": {
      "post": {
        "tags": [
          "Signal Indexing API"
        ],
        "summary": "Send one or more signals for indexing",
        "operationId": "createSignals",
        "parameters": [
          {
            "name": "An index pipeline to use for processing signals. Note that the index pipeline must end with a Solr Indexer stage, and in this stage the `enforce_schema` property must be set to 'true'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Whether to commit signals to the collection immediately after indexing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Whether to execute the request asynchronously. If true, an autoCommit is issued and failures are not reported",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query/{id}": {
      "get": {
        "tags": [
          "Query Profiles API"
        ],
        "summary": "Runs a query through a query profile",
        "description": "The query pipeline, collection, and request handler are retrieved from the query profile",
        "operationId": "query",
        "parameters": [
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              },
              "text/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Profiles API"
        ],
        "summary": "Send a query with DSL request through a pipeline",
        "description": "A pipeline will be executed in DSL mode",
        "operationId": "queryWithDsl",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DslRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DslResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/query/{id}/signals": {
      "post": {
        "tags": [
          "Query Profiles API"
        ],
        "summary": "Indexes JSON-format response signals into the signal collection specified in a query profile",
        "description": "Usually this means signal documents were previously processed by another pipeline",
        "operationId": "submitSignalsAsPipelineDocuments_1",
        "parameters": [
          {
            "name": "An index pipeline to use for processing signals. Note that the index pipeline must end with a Solr Indexer stage, and in this stage the `enforce_schema` property must be set to 'true'",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Whether to commit signals to the collection immediately after indexing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Whether to execute the request asynchronously. If true, an autoCommit is issued and failures are not reported",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.lucidworks-document": {
              "schema": {
                "type": "object"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query/{id}/": {
      "get": {
        "tags": [
          "Query Profiles API"
        ],
        "summary": "Runs a query through a query profile",
        "description": "Supports path with a trailing slash to allow SolrJ to use a query profile by setting the requestHandler to \"/\"",
        "operationId": "querySolrj",
        "parameters": [
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              },
              "text/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Profiles API"
        ],
        "summary": "Runs a query through a query profile",
        "description": "Supports path with a trailing slash to allow SolrJ to use a query profile by setting the requestHandler to \"/\". Same as GET but uses POST for long parameter lists",
        "operationId": "queryWithPostSolrj",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              },
              "text/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/query-profiles": {
      "get": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntities",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryProfile"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntity",
        "parameters": [
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProfile"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines": {
      "get": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Get all query pipelines",
        "operationId": "getAllEntities_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryPipelineDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Create a new query pipeline from JSON",
        "operationId": "createEntity_1",
        "parameters": [
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryPipelineDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPipelineDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines/{id}/collections/{collection}": {
      "post": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Send a query with DSL request through a pipeline",
        "description": "A pipeline will be executed in DSL mode",
        "operationId": "queryWithDSL",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DslRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DslResponseWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines/{id}/collections/{collection}/{handler}": {
      "get": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Send a query through a pipeline",
        "description": "Append a Solr query string to the request, as in '/api/apollo/query-pipelines/<id>/collections/<collectionName>/<handler>?<solrQuery>'",
        "externalDocs": {
          "description": "See the Solr documentation",
          "url": "https://solr.apache.org/guide/8_8/requesthandlers-and-searchcomponents-in-solrconfig.html"
        },
        "operationId": "query_1",
        "parameters": [
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              },
              "text/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Send a query through a pipeline",
        "description": "Use this method if the length of your query exceeds normal GET limitations.  Append a Solr query string to the request, as in '/api/apollo/query-pipelines/<id>/collections/<collectionName>/<handler>?<solrQuery>'",
        "externalDocs": {
          "description": "See the Solr documentation",
          "url": "https://solr.apache.org/guide/8_8/requesthandlers-and-searchcomponents-in-solrconfig.html"
        },
        "operationId": "queryWithAudio_1_1",
        "parameters": [
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              },
              "text/*": {
                "schema": {
                  "$ref": "#/components/schemas/WriteableResponseObject"
                }
              }
            }
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntities_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Experiment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntity_2",
        "parameters": [
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/job": {
      "post": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Start an experiment",
        "operationId": "startJob",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Stop an experiment",
        "operationId": "stopJob",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            }
          }
        }
      }
    },
    "/custom-rule-types": {
      "get": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntities_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomRuleTypeConfig"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntity_3",
        "parameters": [
          {
            "name": "Indicates the application on which operations should be performed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRuleTypeConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRuleTypeConfig"
                }
              }
            }
          }
        }
      }
    },
    "/query/status": {
      "get": {
        "tags": [
          "Query Profiles API"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/query-stages/status": {
      "get": {
        "tags": [
          "Query Stage API"
        ],
        "operationId": "getStatus_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/query-stages/schema": {
      "get": {
        "tags": [
          "Query Stage API"
        ],
        "summary": "Get the JSON schemas of all stage types",
        "operationId": "listStageSchemas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ObjectType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/query-stages/schema/{type}": {
      "get": {
        "tags": [
          "Query Stage API"
        ],
        "summary": "Get the JSON schema for a single stage type",
        "operationId": "getStageSchema",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/status": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "operationId": "getStatus_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/search": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Search the query rewrite staging collection to get facets and hits",
        "operationId": "search",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "An edit session ID filter. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/search/{type}": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Search the query rewrite staging collection to get facets and hits",
        "operationId": "searchType",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "An edit session ID filter. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Additional parameters used when executing the query",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/search/targeted-docs": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Identify rules targeting the provided (main collection) document IDs",
        "operationId": "searchByTargetedDocIdGET",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "An edit session ID filter. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "A list of main collection document IDs",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/schema": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Get the JSON schema for creating a query rewrite object",
        "operationId": "getSchema",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/schema/{type}": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Get the JSON schema for creating a specific type of object, such as a rule",
        "operationId": "getSchemaType",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/export/{id}": {
      "get": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Export all query rewrite documents from a Solr collection.",
        "operationId": "exportQueryRewriteCollection",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StreamingResponseBody"
                }
              }
            }
          }
        }
      }
    },
    "/query-profiles/status": {
      "get": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "operationId": "getStatus_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/query-profiles/_schema": {
      "get": {
        "tags": [
          "Query Profiles CRUD API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines/status": {
      "get": {
        "tags": [
          "Query Pipelines API"
        ],
        "operationId": "getStatus_4",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/query-pipelines/_schema": {
      "get": {
        "tags": [
          "Query Pipelines API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/variant": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get the variant that would be picked for a given user ID",
        "description": "Assumes all traffic is routed to the experiment. Mainly used for debugging purposes.",
        "operationId": "getVariant",
        "parameters": [
          {
            "name": "A user ID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentVariant"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/metrics/{runId}": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get metrics for a specific run of an experiment",
        "operationId": "getMetricsForRun",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExperimentMetricResponse"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/history": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get the job histories for an experiment",
        "operationId": "getHistory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExperimentHistoryEntry"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/experiments/{id}/groundTruth": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get the ground truth results for an experiment as JSON",
        "operationId": "getGroundTruthResultsAsCsv_1",
        "parameters": [
          {
            "name": "A limit on the number of queries to return per entry",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "A limit on the number of entries to return",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/experiments/status": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "operationId": "getStatus_5",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/experiments/_schema": {
      "get": {
        "tags": [
          "Experiments API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_2",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/custom-rule-types/status": {
      "get": {
        "tags": [
          "Custom Rule Type API"
        ],
        "operationId": "getStatus_6",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatusSet"
                }
              }
            }
          }
        }
      }
    },
    "/custom-rule-types/_schema": {
      "get": {
        "tags": [
          "Custom Rule Type API"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchema_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/schema+json;qs=1.0": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              },
              "application/json;qs=0.9": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    },
    "/query-stage-plugins/{pluginId}": {
      "delete": {
        "tags": [
          "Query Stage Plugins API"
        ],
        "summary": "Uninstall a plugin",
        "operationId": "uninstallPlugin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/query-rewrite/undo/{id}": {
      "delete": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Undo all pending changes to a specific doc that has not been published; this is not an ACID transactional operation in that we remove all changes made to a doc in a session and not just the last operation.",
        "operationId": "undo",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/query-rewrite/publish/{type}": {
      "delete": {
        "tags": [
          "Query Rewriting API"
        ],
        "summary": "Delete un-deployed query rewrites with an optional type filter",
        "operationId": "rollbackType",
        "parameters": [
          {
            "name": "An application name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "app:SomeApp"
          },
          {
            "name": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "JobRunView": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string"
          },
          "runId": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "startedBy": {
            "type": "string"
          }
        }
      },
      "QueryRewriteTypeStatus": {
        "type": "object",
        "properties": {
          "app": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "numDeployed": {
            "type": "integer",
            "format": "int64"
          },
          "collection": {
            "type": "string"
          },
          "job": {
            "type": "string"
          },
          "lastDeployedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastJobStatus": {
            "$ref": "#/components/schemas/JobRunView"
          }
        }
      },
      "BulkOperation": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "update": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "create": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "QueryRewrite": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceType": {
            "type": "string"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "reviewer": {
            "type": "string"
          },
          "reviewedOn": {
            "type": "string",
            "format": "date-time"
          },
          "review": {
            "type": "string",
            "enum": [
              "auto",
              "pending",
              "approved",
              "denied",
              "supplied"
            ]
          },
          "deployed": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_deleted": {
            "type": "boolean"
          },
          "base_object_id_s": {
            "type": "string"
          },
          "doc_type": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "IfMatchHeader": {
        "type": "object"
      },
      "ExperimentReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "percentOfTraffic": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ParamAndValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "policy": {
            "type": "string",
            "enum": [
              "replace",
              "append",
              "remove",
              "default"
            ]
          }
        }
      },
      "QueryProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "queryPipeline": {
            "type": "string"
          },
          "collection": {
            "type": "string"
          },
          "searchHandler": {
            "type": "string"
          },
          "searchMode": {
            "type": "string"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParamAndValue"
            }
          },
          "experiment": {
            "$ref": "#/components/schemas/ExperimentReference"
          }
        }
      },
      "QueryPipelineDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StageConfig"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "StageConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "skip": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Experiment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "uniqueIdParameter": {
            "type": "string"
          },
          "baseSignalsCollection": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentVariant"
            }
          },
          "automaticallyAdjustTraffic": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "startTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "runId": {
            "type": "string"
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentMetric"
            }
          }
        }
      },
      "ExperimentMetric": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "binary": {
            "type": "boolean"
          },
          "primary": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ExperimentVariant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "collection": {
            "type": "string"
          },
          "queryPipeline": {
            "type": "string"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParamAndValue"
            }
          },
          "weight": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExperimentRecomputeResponse": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SparkJobStatus"
            }
          }
        }
      },
      "SparkJobStatus": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "unknown",
              "idle",
              "starting",
              "running",
              "finishing",
              "cancelling",
              "finished",
              "cancelled",
              "error",
              "skipped"
            ]
          },
          "jobId": {
            "type": "string"
          }
        }
      },
      "AnyType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          }
        }
      },
      "AnyTypeObjectObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          }
        }
      },
      "CustomRuleTypeConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "display_type": {
            "type": "string"
          },
          "pipeline_id": {
            "type": "string"
          },
          "schema": {
            "$ref": "#/components/schemas/ObjectType"
          }
        }
      },
      "ObjectType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "additionalProperties": {
            "type": "object"
          },
          "minProperties": {
            "type": "integer",
            "format": "int32"
          },
          "maxProperties": {
            "type": "integer",
            "format": "int32"
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "default": {
            "type": "object"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          },
          "propertyGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyGroup"
            }
          }
        }
      },
      "PropertyGroup": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "epoch": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "BoostByValue": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "boosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyAndBoost"
            }
          }
        }
      },
      "BoostQuery": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/Query"
          },
          "boost": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "DslRequest": {
        "type": "object",
        "properties": {
          "queryDefinition": {
            "$ref": "#/components/schemas/QueryDefinition"
          },
          "results": {
            "$ref": "#/components/schemas/Results"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "facets": {
            "$ref": "#/components/schemas/Facets"
          }
        }
      },
      "FacetDomain": {
        "type": "object",
        "properties": {
          "additionalFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query"
            }
          },
          "excludedFiltersByName": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FacetField": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "sort": {
            "type": "string",
            "enum": [
              "count",
              "index"
            ]
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "minCount": {
            "type": "integer",
            "format": "int32"
          },
          "missing": {
            "type": "boolean"
          },
          "ensuredValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "domain": {
            "$ref": "#/components/schemas/FacetDomain"
          }
        }
      },
      "FacetRange": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "gap": {
            "type": "string"
          },
          "hardEnd": {
            "type": "boolean"
          },
          "minCount": {
            "type": "integer",
            "format": "int32"
          },
          "include": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "lower",
                "upper",
                "outer",
                "edge",
                "all"
              ]
            }
          },
          "other": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "before",
                "after",
                "between",
                "non",
                "all"
              ]
            }
          },
          "domain": {
            "$ref": "#/components/schemas/FacetDomain"
          }
        }
      },
      "Facets": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetField"
            }
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetRange"
            }
          },
          "groupFacets": {
            "type": "boolean"
          },
          "groupingMethod": {
            "type": "string",
            "enum": [
              "unique",
              "header_doc"
            ]
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "leaderStrategy": {
            "$ref": "#/components/schemas/GroupLeaderStrategy"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortElement"
            }
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GroupLeaderStrategy": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Highlight": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pre": {
            "type": "string"
          },
          "post": {
            "type": "string"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "defaultHighlight": {
            "type": "boolean"
          }
        }
      },
      "KeyAndBoost": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "boost": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "NamedFilter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "$ref": "#/components/schemas/Query"
          }
        }
      },
      "Query": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "QueryDefinition": {
        "type": "object",
        "properties": {
          "main": {
            "$ref": "#/components/schemas/Query"
          },
          "boostsByValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoostByValue"
            }
          },
          "boostsByQuery": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoostQuery"
            }
          },
          "userQuery": {
            "type": "string"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query"
            }
          },
          "namedFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedFilter"
            }
          },
          "groupedQuery": {
            "$ref": "#/components/schemas/Query"
          },
          "groupedFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query"
            }
          }
        }
      },
      "Results": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortElement"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "highlight": {
            "$ref": "#/components/schemas/Highlight"
          },
          "returnScore": {
            "type": "boolean"
          },
          "includeRawResponse": {
            "type": "boolean"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          }
        }
      },
      "SortElement": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "field",
              "expression",
              "relevancy",
              "query"
            ]
          },
          "value": {
            "type": "string"
          },
          "order": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "query": {
            "$ref": "#/components/schemas/Query"
          }
        }
      },
      "Banner": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        }
      },
      "Collation": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "hits": {
            "type": "integer",
            "format": "int64"
          },
          "corrections": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Debug": {
        "type": "object",
        "properties": {
          "solrParams": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "DslResponseWrapper": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "facets": {
            "$ref": "#/components/schemas/Facets"
          },
          "results": {
            "$ref": "#/components/schemas/Results"
          },
          "spellcheck": {
            "$ref": "#/components/schemas/Spellcheck"
          },
          "debugResponse": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "rules": {
            "$ref": "#/components/schemas/Rules"
          }
        }
      },
      "JsonBlobs": {
        "type": "object"
      },
      "Meta": {
        "type": "object",
        "properties": {
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "debug": {
            "$ref": "#/components/schemas/Debug"
          }
        }
      },
      "ResponseValues": {
        "type": "object"
      },
      "Rules": {
        "type": "object",
        "properties": {
          "redirects": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "responseValues": {
            "$ref": "#/components/schemas/ResponseValues"
          },
          "banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Banner"
            }
          },
          "jsonBlobs": {
            "$ref": "#/components/schemas/JsonBlobs"
          }
        }
      },
      "Spellcheck": {
        "type": "object",
        "properties": {
          "correctlySpelled": {
            "type": "boolean"
          },
          "wordSuggestions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Suggestion"
            }
          },
          "querySuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collation"
            }
          }
        }
      },
      "StageTime": {
        "type": "object",
        "properties": {
          "stage": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Suggestion": {
        "type": "object",
        "properties": {
          "numFound": {
            "type": "integer",
            "format": "int32"
          },
          "startOffset": {
            "type": "integer",
            "format": "int32"
          },
          "endOffset": {
            "type": "integer",
            "format": "int32"
          },
          "origFreq": {
            "type": "integer",
            "format": "int32"
          },
          "wordFreqList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordFreq"
            }
          }
        }
      },
      "Timing": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "mainQuery": {
            "type": "integer",
            "format": "int64"
          },
          "pipeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StageTime"
            }
          }
        }
      },
      "WordFreq": {
        "type": "object",
        "properties": {
          "word": {
            "type": "string"
          },
          "freq": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "wildcardType": {
            "type": "boolean"
          },
          "wildcardSubtype": {
            "type": "boolean"
          }
        }
      },
      "WriteableResponseObject": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "contentCharset": {
            "type": "string"
          }
        }
      },
      "MultiValueMapStringString": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "ServiceStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "starting",
              "ok",
              "warning",
              "error",
              "shutdown"
            ]
          },
          "node": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusMessage"
            }
          }
        }
      },
      "ServiceStatusSet": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "items": {
          "$ref": "#/components/schemas/ServiceStatus"
        }
      },
      "StatusMessage": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "FacetCountsCollection": {
        "type": "object",
        "properties": {
          "facet_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "facet_ranges": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FacetRange"
            }
          }
        }
      },
      "GroupsCollection": {
        "type": "object",
        "properties": {
          "numFound": {
            "type": "integer",
            "format": "int64"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "numFound": {
            "type": "integer",
            "format": "int64"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "maxScore": {
            "type": "number",
            "format": "double"
          },
          "docs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "ResponseHeader": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "QTime": {
            "type": "integer",
            "format": "int32"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/Response"
          },
          "responseHeader": {
            "$ref": "#/components/schemas/ResponseHeader"
          },
          "facet_counts": {
            "$ref": "#/components/schemas/FacetCountsCollection"
          },
          "facets": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "stats": {
            "$ref": "#/components/schemas/Stats"
          },
          "grouped": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GroupsCollection"
            }
          },
          "debug": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "highlighting": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "fusionResponse": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Stats": {
        "type": "object",
        "properties": {
          "stats_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "StreamingResponseBody": {
        "type": "object"
      },
      "DateAndValue": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExperimentMetricResponse": {
        "type": "object",
        "properties": {
          "experimentStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "experimentEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "dataEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "runId": {
            "type": "string"
          },
          "totalRequests": {
            "type": "integer",
            "format": "int64"
          },
          "requestsInExperiment": {
            "type": "integer",
            "format": "int64"
          },
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentMetricVariantResult"
            }
          }
        }
      },
      "ExperimentMetricResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateAndValue"
            }
          },
          "probabilityOfBeating": {
            "type": "number",
            "format": "double"
          },
          "p": {
            "type": "number",
            "format": "double"
          },
          "confidence": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExperimentMetricVariantResult": {
        "type": "object",
        "properties": {
          "variantName": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentMetricResult"
            }
          },
          "requests": {
            "type": "integer",
            "format": "int64"
          },
          "percentRequests": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ExperimentHistoryEntry": {
        "type": "object",
        "properties": {
          "experiment": {
            "$ref": "#/components/schemas/Experiment"
          },
          "experimentStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "experimentEndDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
