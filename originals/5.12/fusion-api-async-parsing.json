{
  "openapi": "3.0.1",
  "info": {
    "title": "Fusion Async parsing API",
    "description": "API for async parsing service for Lucidworks Fusion.",
    "contact": {
      "name": "Lucidworks",
      "url": "www.lucidworks.com",
      "email": "support@lucidworks.com"
    },
    "license": {
      "name": "License of API",
      "url": "https://lucidworks.com/legal/developer-license-agreement/"
    },
    "version": "main-37530d48-1710278916587"
  },
  "externalDocs": {
    "description": "Lucidworks Documentation",
    "url": "https://doc.lucidworks.com/"
  },
  "servers": [
    {
      "url": "FUSION_HOST.com/async-parsing"
    }
  ],
  "tags": [
    {
      "name": "Parsers CRUD API",
      "description": "Endpoints to perform Create-Read-Update-Delete operations on Parsers."
    },
    {
      "name": "Failed documents API",
      "description": "Endpoints to get details and remove documents that failed the parsing process"
    },
    {
      "name": "Parsers Schema API",
      "description": "Endpoints to get the Schema of Parsers."
    }
  ],
  "paths": {
    "/parsers/{id}": {
      "get": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Get the parser configuration as JSON by unique ID",
        "operationId": "getEntity",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \"app:SomeApp\". If the entity is not part of the app this request will fail.  Any other comma-separated contexts in the context parameter are allowed but ignored.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ParserConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Update a parser configuration from JSON",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \"app:SomeApp\". If the entity is not part of the app this request will fail.  Any other comma-separated contexts in the context parameter are allowed but ignored.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ParserConfig"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Delete a parser configuration by unique ID",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "An entity tag to match",
            "in": "header",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IfMatchHeader"
            }
          },
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \"app:SomeApp\". If the entity is not part of the app this request will fail.  Any other comma-separated contexts in the context parameter are allowed but ignored.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/parsers": {
      "get": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Get all parser configuration with optional params to filter the results.",
        "operationId": "getAllEntities",
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          {
            "name": "hidden",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParserConfig"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Parsers CRUD API"
        ],
        "summary": "Create a new parser configuration from JSON",
        "operationId": "createEntity",
        "parameters": [
          {
            "name": "Validates which app the entity should be part of by specifying, for example, \"app:SomeApp\". If the entity is not part of the app this request will fail.  Any other comma-separated contexts in the context parameter are allowed but ignored.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ParserConfig"
                }
              }
            }
          }
        }
      }
    },
    "/failed-datasource/{datasourceId}/id/{id}/download": {
      "get": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Download a failed document by datasource ID and document ID.",
        "operationId": "downloadFailedDocument",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataBuffer"
                  }
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/failed-datasource/{datasourceId}/id/{id}": {
      "get": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Get details of a failed document by datasource ID and document ID.",
        "operationId": "getFailedDocument",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "x-internal": true
      },
      "delete": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Delete a failed document by datasource ID and document ID.",
        "operationId": "deleteFailedDocument",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/failed-datasource/{datasourceId}": {
      "get": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Returns a list of failed documents for a given datasource ID",
        "operationId": "getFailedDocsForDatasource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "x-internal": true
      },
      "delete": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Delete all failed documents for a given datasource ID.",
        "operationId": "deleteFailedDocumentsInDatasource",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/failed-datasource": {
      "get": {
        "tags": [
          "Failed documents API"
        ],
        "summary": "Returns a list of datasource IDs that have failed documents",
        "operationId": "getDataSourcesWithFailedDocs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/_schema/parsers": {
      "get": {
        "tags": [
          "Parsers Schema API"
        ],
        "summary": "Get JSON schema for parsers API.",
        "operationId": "getSchema",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectType"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IfMatchHeader": {
        "type": "object"
      },
      "ParserConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "idField": {
            "type": "string"
          },
          "enableMediaTypeDetection": {
            "type": "boolean"
          },
          "detectMediaTypeBasedOnExtension": {
            "type": "boolean"
          },
          "maxParserDepth": {
            "type": "integer",
            "format": "int32"
          },
          "maxFieldLength": {
            "type": "integer",
            "format": "int32"
          },
          "parserStages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParserStageConfig"
            }
          }
        }
      },
      "ParserStageConfig": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "mediaTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pathPatterns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SyntaxAndPattern"
            }
          },
          "errorHandling": {
            "type": "string",
            "enum": [
              "ignore",
              "log",
              "fail",
              "mark"
            ]
          },
          "id": {
            "type": "string"
          },
          "inheritMediaTypes": {
            "type": "boolean"
          },
          "ignoredMediaTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputFieldPrefix": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SyntaxAndPattern": {
        "type": "object",
        "properties": {
          "syntax": {
            "type": "string",
            "enum": [
              "glob",
              "regex"
            ]
          },
          "pattern": {
            "type": "string"
          }
        }
      },
      "DataBuffer": {
        "type": "object"
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "datasourceId": {
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "jobRunId": {
            "type": "string"
          },
          "collectionId": {
            "type": "string"
          },
          "pipelineId": {
            "type": "string"
          },
          "connectorType": {
            "type": "string"
          },
          "failures": {
            "type": "integer",
            "format": "int32"
          },
          "contentType": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "requestHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "optionalContentType": {
            "type": "string"
          }
        }
      },
      "AnyType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          }
        }
      },
      "AnyTypeObjectObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "default": {
            "type": "object"
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          }
        }
      },
      "ObjectType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null",
              "ref"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "additionalProperties": {
            "type": "object"
          },
          "minProperties": {
            "type": "integer",
            "format": "int32"
          },
          "maxProperties": {
            "type": "integer",
            "format": "int32"
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnyType"
            }
          },
          "category": {
            "type": "string"
          },
          "categoryPriority": {
            "type": "integer",
            "format": "int32"
          },
          "enum": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hints": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unsafe": {
            "type": "boolean"
          },
          "default": {
            "type": "object"
          },
          "oneOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnyTypeObjectObject"
            }
          },
          "propertyGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyGroup"
            }
          }
        }
      },
      "PropertyGroup": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
