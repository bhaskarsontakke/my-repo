---
swagger: "2.0"
info:
  version: "4.1.3"
  title: "Fusion Service messaging"
basePath: "/api/apollo"
tags:
- name: "messaging"
schemes:
- "http"
paths:
  /messaging:
    get:
      summary: "Get a list of supported message types"
      description: ""
      operationId: "supportedMessageTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
  /messaging/schedule/{id}:
    put:
      summary: "Update a message that is scheduled to be sent"
      description: "This only works if the message hasn't been sent yet."
      operationId: "update"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of the message to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted message attributes"
        required: false
        schema:
          $ref: "#/definitions/Message"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MessageResponse"
    delete:
      summary: "Remove a message that is scheduled to be sent"
      description: "This only works if the message hasn't been sent yet."
      operationId: "deleteScheduledItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of the message to remove"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The message type"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MessageResponse"
  /messaging/scheduled:
    get:
      summary: "Get the ID and date an object is scheduled to be sent"
      description: "Individual services may or may not guarantee delivery at the specified\
        \ time. For instance, a service may choose to bulk send messages that are\
        \ scheduled to be sent within some specified time window"
      operationId: "scheduled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/Schedule"
  /messaging/send:
    post:
      summary: "Send one or more message objects"
      description: "If the Message has a schedule, then schedule one or more messages.\
        \  Each message must pass in a schedule instance."
      operationId: "send"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON-formatted list of messages and attributes"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Message"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MessageResponse"
  /messaging/send/{messageType}/{id}:
    put:
      summary: "Send a specific message that has been scheduled"
      description: ""
      operationId: "sendScheduled"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "messageType"
        in: "path"
        description: "One of the supported message types"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "The ID of the message to send"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MessageResponse"
  /messaging/service:
    get:
      summary: "Get a list of active messaging services"
      description: ""
      operationId: "serviceConfigurations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MessageServiceConfiguration"
    post:
      summary: "Add a new messaging service"
      description: ""
      operationId: "addService"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/MessageServiceConfiguration"
      responses:
        default:
          description: "successful operation"
  /messaging/service/schema:
    get:
      summary: "Get the messaging service configuration schema"
      description: ""
      operationId: "listMessageServiceSchemas"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/ObjectType"
  /messaging/service/schema/{messageType}:
    get:
      summary: "Get the schema for the message type (not the JSON type)"
      description: ""
      operationId: "getMessageServiceSchema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "messageType"
        in: "path"
        description: "One of the supported message types"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectType"
  /messaging/service/{messageType}:
    put:
      summary: "Update a messaging service's configuration"
      description: ""
      operationId: "updateService"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "messageType"
        in: "path"
        description: "One of the supported message types"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/MessageServiceConfiguration"
      responses:
        default:
          description: "successful operation"
    delete:
      summary: "Remove a MessageService by message type and shut it down"
      description: ""
      operationId: "removeService"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "messageType"
        in: "path"
        description: "One of the supported message types"
        required: true
        type: "string"
      responses:
        default:
          description: "successful operation"
  /messaging/status:
    get:
      summary: "Get the status of the service"
      description: ""
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceStatus"
definitions:
  PropertyGroup:
    type: "object"
    properties:
      label:
        type: "string"
      properties:
        type: "array"
        items:
          type: "string"
  Message:
    type: "object"
    properties:
      id:
        type: "string"
      to:
        type: "array"
        items:
          type: "string"
      from:
        type: "string"
      subject:
        type: "string"
      body:
        type: "string"
      schedule:
        $ref: "#/definitions/Schedule"
      type:
        type: "string"
      messageServiceParams:
        type: "object"
        additionalProperties:
          type: "object"
  MessageServiceConfiguration:
    type: "object"
    properties:
      serviceType:
        type: "string"
  MessageResponse:
    type: "object"
    properties:
      receipts:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/MessageReceipt"
      rateLimited:
        type: "boolean"
        default: false
      errorCode:
        type: "integer"
        format: "int32"
      errorMessage:
        type: "string"
      errorRetryable:
        type: "boolean"
        default: false
      errorThrowable:
        $ref: "#/definitions/Throwable"
      errorContext:
        type: "object"
        additionalProperties:
          type: "object"
      scheduledMap:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/MessageReceipt"
      removedSet:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
  StackTraceElement:
    type: "object"
    properties:
      methodName:
        type: "string"
      fileName:
        type: "string"
      lineNumber:
        type: "integer"
        format: "int32"
      className:
        type: "string"
      nativeMethod:
        type: "boolean"
        default: false
  ItemStoreMessageServiceConfiguration:
    type: "object"
    properties:
      createMode:
        type: "string"
        enum:
        - "PERSISTENT"
        - "PERSISTENT_SEQUENTIAL"
        - "EPHEMERAL"
        - "EPHEMERAL_SEQUENTIAL"
      items:
        type: "array"
        items:
          $ref: "#/definitions/MessageServiceConfiguration"
  MessageReceipt:
    type: "object"
    properties:
      id:
        type: "string"
      sent:
        type: "string"
        format: "date-time"
      sentBy:
        type: "string"
      properties:
        type: "object"
        additionalProperties:
          type: "object"
      error:
        $ref: "#/definitions/Throwable"
  Annotation:
    type: "object"
  StatusMessage:
    type: "object"
    properties:
      message:
        type: "string"
      date:
        type: "string"
        format: "date-time"
  ObjectType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      maxProperties:
        type: "integer"
        format: "int32"
      minProperties:
        type: "integer"
        format: "int32"
      required:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      properties:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      propertyGroups:
        type: "array"
        items:
          $ref: "#/definitions/PropertyGroup"
      useSchemaGrouping:
        $ref: "#/definitions/UseSchemaGrouping"
      definitions:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
      additionalProperties:
        type: "object"
  CallParams:
    type: "object"
    properties:
      uri:
        type: "string"
      method:
        type: "string"
        enum:
        - "GET"
        - "PUT"
        - "POST"
        - "DELETE"
      queryParams:
        type: "object"
        additionalProperties:
          type: "string"
      headers:
        type: "object"
        additionalProperties:
          type: "string"
      entity:
        type: "object"
  Type:
    type: "object"
    properties:
      typeName:
        type: "string"
  AccessibleProperty:
    type: "object"
    properties:
      name:
        type: "string"
      required:
        type: "boolean"
        default: false
      genericType:
        $ref: "#/definitions/Type"
      accessibleObject:
        $ref: "#/definitions/AccessibleObject"
      hidden:
        type: "boolean"
        default: false
  ServiceStatus:
    type: "object"
    properties:
      node:
        type: "string"
      status:
        type: "string"
        enum:
        - "starting"
        - "ok"
        - "warning"
        - "error"
        - "shutdown"
      additionalProperties:
        type: "object"
        additionalProperties:
          type: "object"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/StatusMessage"
  Schedule:
    type: "object"
    properties:
      id:
        type: "string"
      createTime:
        type: "string"
        format: "date-time"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      repeatUnit:
        type: "string"
        enum:
        - "MILLISECOND"
        - "SECOND"
        - "MINUTE"
        - "HOUR"
        - "DAY"
        - "WEEK"
        - "MONTH"
      interval:
        type: "integer"
        format: "int32"
      active:
        type: "boolean"
        default: false
      creatorType:
        type: "string"
      creatorId:
        type: "string"
      callParams:
        $ref: "#/definitions/CallParams"
  Throwable:
    type: "object"
    properties:
      cause:
        $ref: "#/definitions/Throwable"
      stackTrace:
        type: "array"
        items:
          $ref: "#/definitions/StackTraceElement"
      message:
        type: "string"
      localizedMessage:
        type: "string"
      suppressed:
        type: "array"
        items:
          $ref: "#/definitions/Throwable"
  AccessibleObject:
    type: "object"
    properties:
      annotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      declaredAnnotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      accessible:
        type: "boolean"
        default: false
  AnyType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  AnyTypeObjectObject:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  UseSchemaGrouping:
    type: "object"
