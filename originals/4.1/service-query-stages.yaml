---
swagger: "2.0"
info:
  version: "4.1.3"
  title: "Fusion Service query-stages"
basePath: "/api/apollo"
tags:
- name: "query-stages"
schemes:
- "http"
paths:
  /query-stages/instances:
    get:
      summary: "Get all stage instances"
      description: ""
      operationId: "listStageInstances"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "The stage type"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StageConfig"
    post:
      summary: "Create a new stage instance"
      description: ""
      operationId: "createStage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/StageConfig"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StageConfig"
  /query-stages/instances/{id}:
    get:
      summary: "Get a specific stage instance"
      description: ""
      operationId: "getStageInstance"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The stage ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StageConfig"
    put:
      summary: "Update a specific stage instance"
      description: ""
      operationId: "createOrUpdateStageInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The stage ID"
        required: true
        type: "string"
      - name: "If-Match"
        in: "header"
        description: "An entity tag to match against the specified stage instance"
        required: false
        type: "string"
        default: "\"-1\""
      - in: "body"
        name: "body"
        description: "JSON-formatted configuration values"
        required: false
        schema:
          $ref: "#/definitions/StageConfig"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/StageConfig"
    delete:
      summary: "Delete a specific stage instance"
      description: ""
      operationId: "deleteStageInstance"
      parameters:
      - name: "id"
        in: "path"
        description: "The stage ID"
        required: true
        type: "string"
      - name: "If-Match"
        in: "header"
        description: "An entity tag to match against the specified stage instance"
        required: false
        type: "string"
        default: "\"-1\""
      responses:
        default:
          description: "successful operation"
  /query-stages/instances/{id}/test:
    get:
      summary: "Perform a test query"
      description: ""
      operationId: "testStageInstance"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Stage ID"
        required: true
        type: "string"
      - name: "collection"
        in: "query"
        description: "Collection ID"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/QueryRequestAndResponse"
  /query-stages/schema:
    get:
      summary: "Get the properties for all available stage types"
      description: ""
      operationId: "listStageSchemas"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/ObjectType"
  /query-stages/schema/{type}:
    get:
      summary: "Get the properties for a stage type"
      description: ""
      operationId: "getStageSchema"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "The stage type"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ObjectType"
  /query-stages/status:
    get:
      summary: "Get the status of the service"
      description: ""
      operationId: "getStatus"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceStatus"
  /query-stages/test:
    post:
      summary: "Define a stage and perform a test query"
      description: ""
      operationId: "testStage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "collection"
        in: "query"
        description: "Collection ID"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "JSON-formatted stage configuration values"
        required: false
        schema:
          $ref: "#/definitions/StageConfig"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/QueryRequestAndResponse"
definitions:
  PropertyGroup:
    type: "object"
    properties:
      label:
        type: "string"
      properties:
        type: "array"
        items:
          type: "string"
  QueryRequestAndResponse:
    type: "object"
    properties:
      request:
        $ref: "#/definitions/Request"
      response:
        $ref: "#/definitions/Response"
      totalTime:
        type: "integer"
        format: "int64"
      fieldNames:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
  Request:
    type: "object"
    properties:
      initialParams:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      headers:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
      httpMethod:
        type: "string"
      entityBytes:
        type: "array"
        items:
          type: "string"
          format: "byte"
      entityMediaType:
        $ref: "#/definitions/MediaType"
      params:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
  StageConfig:
    type: "object"
    properties:
      type:
        type: "string"
      id:
        type: "string"
      skip:
        type: "boolean"
        default: false
      label:
        type: "string"
      condition:
        type: "string"
      additionalProperties:
        type: "object"
        additionalProperties:
          type: "object"
  Annotation:
    type: "object"
  StatusMessage:
    type: "object"
    properties:
      message:
        type: "string"
      date:
        type: "string"
        format: "date-time"
  Response:
    type: "object"
    properties:
      headers:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            type: "string"
  ObjectType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      maxProperties:
        type: "integer"
        format: "int32"
      minProperties:
        type: "integer"
        format: "int32"
      required:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      properties:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      propertyGroups:
        type: "array"
        items:
          $ref: "#/definitions/PropertyGroup"
      useSchemaGrouping:
        $ref: "#/definitions/UseSchemaGrouping"
      definitions:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/AnyType"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
      additionalProperties:
        type: "object"
  Type:
    type: "object"
    properties:
      typeName:
        type: "string"
  AccessibleProperty:
    type: "object"
    properties:
      name:
        type: "string"
      required:
        type: "boolean"
        default: false
      genericType:
        $ref: "#/definitions/Type"
      accessibleObject:
        $ref: "#/definitions/AccessibleObject"
      hidden:
        type: "boolean"
        default: false
  ServiceStatus:
    type: "object"
    properties:
      node:
        type: "string"
      status:
        type: "string"
        enum:
        - "starting"
        - "ok"
        - "warning"
        - "error"
        - "shutdown"
      additionalProperties:
        type: "object"
        additionalProperties:
          type: "object"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/StatusMessage"
  MediaType:
    type: "object"
    properties:
      type:
        type: "string"
      subtype:
        type: "string"
      parameters:
        type: "object"
        additionalProperties:
          type: "string"
      wildcardType:
        type: "boolean"
        default: false
      wildcardSubtype:
        type: "boolean"
        default: false
  AccessibleObject:
    type: "object"
    properties:
      annotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      declaredAnnotations:
        type: "array"
        items:
          $ref: "#/definitions/Annotation"
      accessible:
        type: "boolean"
        default: false
  AnyType:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  AnyTypeObjectObject:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
      categoryPriority:
        type: "integer"
        format: "int32"
      allowedValues:
        type: "array"
        uniqueItems: true
        items:
          type: "object"
      hints:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
      defaultValue:
        type: "object"
      accessibleProperty:
        $ref: "#/definitions/AccessibleProperty"
      oneOf:
        type: "array"
        items:
          $ref: "#/definitions/AnyTypeObjectObject"
      type:
        type: "string"
        enum:
        - "String"
        - "Number"
        - "Integer"
        - "Boolean"
        - "Object"
        - "Array"
        - "Null"
        - "Ref"
  UseSchemaGrouping:
    type: "object"
