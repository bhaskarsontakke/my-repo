{
  "swagger": "2.0",
  "info": {
    "version": "5.6.1",
    "title": "Fusion REST API"
  },
  "basePath": "/api",
  "schemes": ["http"],
  "paths": {
    "/apps/{id}": {
      "get": {
        "summary": "Get the specified entity",
        "description": "",
        "operationId": "getEntity",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entity",
        "description": "",
        "operationId": "deleteEntityWithBody",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "For supplying additional request parameters (such as relatedObjectIds) via request body instead of as request parameters. Use this if the URL is getting too long.",
          "required": false,
          "schema": {
            "$ref": "#/definitions/BodyRequestParams"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/apps": {
      "get": {
        "summary": "Get all entities",
        "description": "",
        "operationId": "getAllEntities",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          }
        }
      }
    },
    "/apps/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getEntitySchema",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/apps/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/webapps/{id}/edits/{sessionId}/files/{file}": {
      "get": {
        "summary": "Access a file within an editing session",
        "description": "",
        "operationId": "getFile",
        "produces": ["application/*", "text/*"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }, {
          "name": "file",
          "in": "path",
          "description": "File",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "summary": "Update a file within an editing session",
        "description": "",
        "operationId": "putFile",
        "consumes": ["*/*"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }, {
          "name": "file",
          "in": "path",
          "description": "File",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "If-Match value",
          "required": false,
          "type": "string",
          "default": "\"0\""
        }, {
          "in": "body",
          "name": "body",
          "description": "File contents",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Delete a file within an editing session",
        "description": "",
        "operationId": "deleteFile",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }, {
          "name": "file",
          "in": "path",
          "description": "File",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "If-Match value",
          "required": false,
          "type": "string",
          "default": "\"0\""
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps/{id}/edits/{sessionId}": {
      "get": {
        "summary": "Get editing session",
        "description": "",
        "operationId": "getSession",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditingSession"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an editing session",
        "description": "",
        "operationId": "deleteSession",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps/{id}/edits/{sessionId}/action": {
      "post": {
        "summary": "Perform an action on an editing session",
        "description": "",
        "operationId": "action",
        "consumes": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SessionAction"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps/{id}/edits": {
      "get": {
        "summary": "List editing sessions",
        "description": "",
        "operationId": "listSessions",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EditingSession"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Start an editing session",
        "description": "",
        "operationId": "startSession",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/EditingSession"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditingSession"
            }
          }
        }
      }
    },
    "/webapps/{id}": {
      "get": {
        "summary": "Get the specified entity",
        "description": "",
        "operationId": "getEntity_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entity",
        "description": "",
        "operationId": "deleteEntityWithBody_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "For supplying additional request parameters (such as relatedObjectIds) via request body instead of as request parameters. Use this if the URL is getting too long.",
          "required": false,
          "schema": {
            "$ref": "#/definitions/BodyRequestParams"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps": {
      "get": {
        "summary": "Get all entities",
        "description": "",
        "operationId": "getAllEntities_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Import Application metadata including all editing sessions",
        "description": "",
        "operationId": "importApp",
        "consumes": ["application/vnd.lucidworks-appkit-export+json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Application metadata",
          "required": false,
          "schema": {
            "$ref": "#/definitions/AppkitAppExportContainer"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps/{id}/edits/{sessionId}/files": {
      "get": {
        "summary": "List all files within an editing session",
        "description": "",
        "operationId": "listFiles",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Application ID",
          "required": true,
          "type": "string"
        }, {
          "name": "sessionId",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blob"
              }
            }
          }
        }
      }
    },
    "/webapps/{id}/war": {
      "get": {
        "operationId": "downloadWar",
        "produces": ["application/zip"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "head": {
        "operationId": "getWarMetadata",
        "produces": ["application/zip"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "operationId": "uploadWar",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webapps/{id}/war/manifest": {
      "get": {
        "operationId": "getWarManifestAsText",
        "produces": ["text/plain"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/webapps/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getEntitySchema_1",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/webapps/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/blobs/{id}": {
      "get": {
        "summary": "Retrieve a blob",
        "description": "",
        "operationId": "getBlob",
        "produces": ["*/*"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The blob ID",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "head": {
        "summary": "Retrieve a blob's metadata only",
        "description": "",
        "operationId": "getBlobMetadata",
        "produces": ["*/*"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The blob ID",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "summary": "Upload a blob and define its ID",
        "description": "",
        "operationId": "putBlob",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The blob ID",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"0\""
        }, {
          "name": "Content-Type",
          "in": "header",
          "description": "The media type of the entity body",
          "required": false,
          "type": "string",
          "default": "application/octet-stream"
        }, {
          "name": "fusion-blob-type",
          "in": "header",
          "description": "The blob sub-type of the entity",
          "required": false,
          "type": "string"
        }, {
          "name": "commit",
          "in": "query",
          "description": "Whether to commit to Solr Blob store or not",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "update",
          "in": "query",
          "description": "update the data, metadata, or both (default)",
          "required": false,
          "type": "string",
          "default": "both"
        }, {
          "in": "body",
          "name": "body",
          "description": "The blob to store",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Remove a blob from the blob store",
        "description": "",
        "operationId": "deleteFile_1",
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The blob ID",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"0\""
        }, {
          "name": "commit",
          "in": "query",
          "description": "Whether to commit to Solr Blob store or not",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blobs/convert": {
      "put": {
        "summary": "migrate blob manifests from 3.x to 4.x format",
        "description": "",
        "operationId": "migrateBlobManifests",
        "produces": ["application/*", "text/*"],
        "parameters": [],
        "deprecated": true,
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blobs": {
      "get": {
        "summary": "List blobs",
        "description": "",
        "operationId": "listBlobManifests",
        "produces": ["application/json"],
        "parameters": [{
          "name": "dir",
          "in": "query",
          "description": "Directory to be queries",
          "required": false,
          "type": "string"
        }, {
          "name": "recurse",
          "in": "query",
          "description": "Recurse when querying directory",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "showdirs",
          "in": "query",
          "description": "Show directories when querying directory",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blob"
              }
            }
          }
        }
      }
    },
    "/blobs/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_2",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/features/{feature}": {
      "get": {
        "summary": "Return all properties for a specified feature in a collection",
        "description": "",
        "operationId": "getFeature",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "feature",
          "in": "path",
          "description": "The name of a feature",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          }
        }
      },
      "put": {
        "summary": "Update a feature's properties",
        "description": "",
        "operationId": "overwriteFeature",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "feature",
          "in": "path",
          "description": "The name of a feature",
          "required": true,
          "type": "string"
        }, {
          "name": "callback",
          "in": "query",
          "description": "Additional commands to execute",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified feature",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Remove a feature from a collection",
        "description": "",
        "operationId": "resetFeature",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "feature",
          "in": "path",
          "description": "The name of a feature",
          "required": true,
          "type": "string"
        }, {
          "name": "callback",
          "in": "query",
          "description": "Additional commands to execute",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified feature",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "Return properties for all existing collections",
        "description": "",
        "operationId": "getCollections",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Collection"
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createCollection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Collection"
          }
        }, {
          "name": "pipelines",
          "in": "query",
          "description": "A boolean to indicate if pipelines should also be created. This has been deprecated in favor of 'relatedObjects'",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        }
      }
    },
    "/collections/{collection}": {
      "get": {
        "summary": "Return the properties for a specific collection",
        "description": "",
        "operationId": "getCollection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        }
      },
      "put": {
        "summary": "Create a new data collection or update an existing one",
        "description": "",
        "operationId": "overwriteCollection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Collection"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a collection",
        "description": "",
        "operationId": "deleteCollection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "solr",
          "in": "query",
          "description": "'True' to delete the collection from Solr while it is deleted from Fusion",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "purge",
          "in": "query",
          "description": "'True' to also delete associated signals and searchLogs collections",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "pipelines",
          "in": "query",
          "description": "'True' to also delete associated pipelines",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified collection",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/features": {
      "get": {
        "summary": "Return all features for a specified collection",
        "description": "",
        "operationId": "listFeatures",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Feature"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/stats": {
      "get": {
        "summary": "Return statistics about a collection",
        "description": "Stats include the number of documents in the index, how many requests have been made of the collection, the average request time, and the index size in bytes",
        "operationId": "getCollectionMetrics",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CollectionMetrics"
            }
          }
        }
      }
    },
    "/collections/{collection}/status": {
      "get": {
        "summary": "Return the status of a collection",
        "description": "Status includes the state of each shard and each shard’s replica. Each shard will be listed, and within that each replica, including the core name, its status as leader, the base URL, and the node name",
        "operationId": "getCollectionStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CollectionInfo"
            }
          }
        }
      }
    },
    "/collections/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_3",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/configurations/{key}": {
      "get": {
        "summary": "Display the specified configuration item",
        "description": "",
        "operationId": "getProperty",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "key",
          "in": "path",
          "description": "A configuration item key",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new configuration item",
        "description": "",
        "operationId": "createProperty",
        "consumes": ["application/json", "text/plain"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "key",
          "in": "path",
          "description": "The new configuration item key",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "The new configuration item value",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "secret",
          "in": "query",
          "description": "Store this item as encrypted",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "summary": "Update a configuration item",
        "description": "",
        "operationId": "setProperty",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "key",
          "in": "path",
          "description": "A configuration item key",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "The configuration item value",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "name": "secret",
          "in": "query",
          "description": "Store this item as encrypted",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/configurations": {
      "get": {
        "summary": "List matching configuration items",
        "description": "",
        "operationId": "find",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "pattern",
          "in": "query",
          "description": "Find all configuration items that contain the specified string",
          "required": false,
          "type": "string"
        }, {
          "name": "prefix",
          "in": "query",
          "description": "Find all configuration items that start with the specified string",
          "required": false,
          "type": "string"
        }, {
          "name": "verbose",
          "in": "query",
          "description": "Display the Fusion component (or the part of the server’s operating system) that set the configuration item. Otherwise, the output includes only the name and value of the configuration item",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/configurations/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_4",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/crud-events/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_5",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/data-models/{id}/fields": {
      "get": {
        "summary": "Get list of declared fields for a DataModel",
        "description": "",
        "operationId": "getDataModelFields",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "Data model id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllowedValue"
              }
            }
          }
        }
      }
    },
    "/data-models/{id}": {
      "get": {
        "summary": "Get the specified entity",
        "description": "",
        "operationId": "getEntity_2",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entity",
        "description": "",
        "operationId": "deleteEntityWithBody_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "For supplying additional request parameters (such as relatedObjectIds) via request body instead of as request parameters. Use this if the URL is getting too long.",
          "required": false,
          "schema": {
            "$ref": "#/definitions/BodyRequestParams"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/data-models": {
      "get": {
        "summary": "Get all entities",
        "description": "",
        "operationId": "getAllEntities_2",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          }
        }
      }
    },
    "/data-models/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getEntitySchema_2",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/data-models/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_6",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/features/{feature}": {
      "get": {
        "summary": "Return details about a feature",
        "description": "",
        "operationId": "getFeature_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "feature",
          "in": "path",
          "description": "The name of a feature",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FeatureSpec"
            }
          }
        }
      }
    },
    "/features/{feature}/_schema": {
      "get": {
        "summary": "Get a feature's configuration schema",
        "description": "",
        "operationId": "getFeatureSchema",
        "produces": ["application/json"],
        "parameters": [{
          "name": "feature",
          "in": "path",
          "description": "The name of a feature",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/features": {
      "get": {
        "summary": "Return a list of features",
        "description": "",
        "operationId": "listFeatures_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeatureSpec"
              }
            }
          }
        }
      }
    },
    "/features/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_7",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/history/{service}": {
      "get": {
        "summary": "Return information about a service",
        "description": "",
        "operationId": "getServiceHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }, {
          "name": "timeRange",
          "in": "query",
          "description": "Time range in Solr format. Default value is [NOW-30DAYS/DAY TO NOW]",
          "required": false,
          "type": "string"
        }, {
          "name": "maxLength",
          "in": "query",
          "description": "Maximum number of history elements to retrieve. Default value is 50. For values greater than 500, only 500 history elements will be retrieved",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/History"
            }
          }
        }
      },
      "put": {
        "summary": "For internal use by the system",
        "description": "",
        "operationId": "addServiceHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/HistoryEvent"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Delete all history for a specified service",
        "description": "",
        "operationId": "clearServiceHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history": {
      "get": {
        "summary": "Return a list of services",
        "description": "",
        "operationId": "listAllServices",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Clear the histories for all services",
        "description": "",
        "operationId": "clearAllServiceHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history/{service}/items": {
      "get": {
        "summary": "Return all items in a service's history",
        "description": "",
        "operationId": "listAllItems",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Clear all items from a service's history",
        "description": "",
        "operationId": "clearAllItemHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history/{service}/items/{item}": {
      "get": {
        "summary": "Return a specific item in a service's history",
        "description": "",
        "operationId": "getItemHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }, {
          "name": "item",
          "in": "path",
          "description": "The name of a history item",
          "required": true,
          "type": "string"
        }, {
          "name": "timeRange",
          "in": "query",
          "description": "Time range in Solr format. Default value is [NOW-30DAYS/DAY TO NOW]",
          "required": false,
          "type": "string"
        }, {
          "name": "maxLength",
          "in": "query",
          "description": "Maximum number of history elements to retrieve. Default value is 50. For values greater than 500, only 500 history elements will be retrieved",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/History"
            }
          }
        }
      },
      "put": {
        "summary": "Add an item to a service's history",
        "description": "",
        "operationId": "addItemHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }, {
          "name": "item",
          "in": "path",
          "description": "The name of a history item",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted history items",
          "required": false,
          "schema": {
            "$ref": "#/definitions/HistoryEvent"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Clear a specific item from a service's history",
        "description": "",
        "operationId": "clearItemHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "service",
          "in": "path",
          "description": "The name of a service",
          "required": true,
          "type": "string"
        }, {
          "name": "item",
          "in": "path",
          "description": "The name of a history item",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/history/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_8",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/introspect/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_9",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/jobs/{resource}/history": {
      "get": {
        "summary": "Get the run history for the specified job",
        "description": "",
        "operationId": "listJobHistory",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }, {
          "name": "limit",
          "in": "query",
          "description": "Return first N history items",
          "required": false,
          "type": "integer",
          "default": 100,
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobRunView"
              }
            }
          }
        }
      }
    },
    "/jobs/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getJobConfigSchema",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/jobs/{resource}/schedule": {
      "get": {
        "summary": "Get the schedule for the specified job",
        "description": "",
        "operationId": "getJobConfig",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobConfig"
            }
          }
        }
      },
      "put": {
        "summary": "Configure the schedule for the specified job",
        "description": "",
        "operationId": "setJobConfig",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/JobConfig"
          }
        }, {
          "name": "validate",
          "in": "query",
          "description": "Validate that the job config exists",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobConfig"
            }
          }
        }
      },
      "delete": {
        "summary": "Reset the schedule for the specified job",
        "description": "",
        "operationId": "resetJobConfig",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/jobs/{resource}/actions": {
      "post": {
        "summary": "Start, pause, or abort the specified job",
        "description": "",
        "operationId": "controlJob",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "One of: `start` or `abort`",
          "required": false,
          "schema": {
            "$ref": "#/definitions/JobActionRequest"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobActionResponse"
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List all jobs",
        "description": "",
        "operationId": "listJobs",
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "Filter jobs by status, one of: `ready`, `running`, `success`, `aborted`, or `failed`",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "enabled",
          "in": "query",
          "description": "Filter jobs by whether they are enabled (`true`) or disabled (`false`)",
          "required": false,
          "type": "string"
        }, {
          "name": "type",
          "in": "query",
          "description": "Filter jobs by type, one of: `task`, `spark`, or `datasource`",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobView"
              }
            }
          }
        }
      }
    },
    "/jobs/{resource}": {
      "get": {
        "summary": "Get the status and configuration for the specified job",
        "description": "",
        "operationId": "getJob",
        "parameters": [{
          "name": "resource",
          "in": "path",
          "description": "The job ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobView"
            }
          }
        }
      }
    },
    "/jobs/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_10",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/license": {
      "get": {
        "summary": "Export current Fusion License",
        "description": "",
        "operationId": "exportLicense",
        "produces": ["application/octet-stream; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace current Fusion License with map of properties",
        "description": "",
        "operationId": "replaceLicense_1",
        "consumes": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "New License",
          "required": false,
          "schema": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/license/check": {
      "get": {
        "summary": "Check if the license is valid",
        "description": "",
        "operationId": "checkLicense",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/license/capability/{capability}": {
      "get": {
        "summary": "Gets the licensed Capability details",
        "description": "",
        "operationId": "getCapability",
        "produces": ["application/json"],
        "parameters": [{
          "name": "capability",
          "in": "path",
          "description": "capability",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/license/expiration": {
      "get": {
        "summary": "Gets the Expiration Date for the current Fusion License",
        "description": "",
        "operationId": "getExpirationDate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "/license/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_11",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/links/unlink": {
      "delete": {
        "summary": "Unlink provided resources",
        "description": "If object is not specified, all links for subject are removed",
        "operationId": "unlink",
        "parameters": [{
          "name": "subject",
          "in": "query",
          "description": "Subject to unlink",
          "required": false,
          "type": "string"
        }, {
          "name": "object",
          "in": "query",
          "description": "Object to unlink",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/links/between": {
      "get": {
        "summary": "Get all links between resources passed",
        "description": "",
        "operationId": "getLinksBetween",
        "produces": ["application/json"],
        "parameters": [{
          "name": "subject",
          "in": "query",
          "description": "Subject to get links for",
          "required": false,
          "type": "string"
        }, {
          "name": "object",
          "in": "query",
          "description": "Object to get links for",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      }
    },
    "/links/replace": {
      "post": {
        "summary": "Replace links for the resource",
        "description": "",
        "operationId": "replaceLinks",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "resource",
          "in": "query",
          "description": "Resource to replace links for",
          "required": false,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted list of link definitions",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/links/directed": {
      "get": {
        "summary": "Return outgoing links for the given resource",
        "description": "Exclusive means objects used by the given resource and not used by other resources.",
        "operationId": "getDirectedLinks",
        "produces": ["application/json"],
        "parameters": [{
          "name": "resource",
          "in": "query",
          "description": "Resource to get exclusive links for",
          "required": false,
          "type": "string"
        }, {
          "name": "exclusive",
          "in": "query",
          "description": "Exclusive means objects used by the given resource and not used by other resources. Default value is false",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "bypassCache",
          "in": "query",
          "description": "Bypass the cache and retrieve directly from storage",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "skipSharedGroup",
          "in": "query",
          "description": "Exclude shared group from returned links",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      }
    },
    "/links/check": {
      "get": {
        "summary": "Check link existence",
        "description": "",
        "operationId": "hasLink",
        "parameters": [{
          "name": "subject",
          "in": "query",
          "description": "Subject to check links for",
          "required": false,
          "type": "string"
        }, {
          "name": "object",
          "in": "query",
          "description": "Object to check links for",
          "required": false,
          "type": "string"
        }, {
          "name": "linkType",
          "in": "query",
          "description": "Link type to check",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/links/involving": {
      "get": {
        "summary": "Get all links involving the resource",
        "description": "",
        "operationId": "getLinksInvolving",
        "produces": ["application/json"],
        "parameters": [{
          "name": "resource",
          "in": "query",
          "description": "Resource to get links for",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      }
    },
    "/links": {
      "get": {
        "summary": "Get all links, or links matching the given criteria",
        "description": "For the request body, an asterisk (*) can be used in place of an ID to indicate a wildcard",
        "operationId": "listLinks",
        "produces": ["application/json"],
        "parameters": [{
          "name": "subject",
          "in": "query",
          "description": "Return only links with a matching subject",
          "required": false,
          "type": "string",
          "default": "*"
        }, {
          "name": "object",
          "in": "query",
          "description": "Return only links with a matching object",
          "required": false,
          "type": "string",
          "default": "*"
        }, {
          "name": "linkType",
          "in": "query",
          "description": "Return only links with a matching type",
          "required": false,
          "type": "string",
          "default": "*"
        }, {
          "name": "transitive",
          "in": "query",
          "description": "Return transitive links",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "bypassCache",
          "in": "query",
          "description": "Bypass the cache and retrieve directly from storage",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Link"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Link two objects together with a link type",
        "description": "",
        "operationId": "putLink",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "JSON-formatted link definition that specifies the subject, object, and linkType",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Link"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Link"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete links matching the provided criteria",
        "description": "For the request body, an asterisk (*) can be used in place of an ID to indicate a wildcard",
        "operationId": "deleteLink",
        "parameters": [{
          "name": "subject",
          "in": "query",
          "description": "Delete only links with a matching subject",
          "required": false,
          "type": "string"
        }, {
          "name": "object",
          "in": "query",
          "description": "Delete only links with a matching object",
          "required": false,
          "type": "string"
        }, {
          "name": "linkType",
          "in": "query",
          "description": "Delete only links with a matching type",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/links/contexts": {
      "get": {
        "summary": "Get all Fusion app contexts from list of passed for each of resources passed",
        "description": "Don't pass contexts if you want to evaluate against all existing Fusion apps",
        "operationId": "findContexts",
        "produces": ["application/json"],
        "parameters": [{
          "name": "contexts",
          "in": "query",
          "description": "List of Fusion apps to check against",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "resources",
          "in": "query",
          "description": "List of resources to check against",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "bypassCache",
          "in": "query",
          "description": "Bypass the cache and retrieve directly from storage",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "$ref": "#/definitions/FusionResource"
                }
              }
            }
          }
        }
      }
    },
    "/links/app-context": {
      "get": {
        "summary": "Get list of resources that belong to provided Fusion app",
        "description": "Specify resourceType to get only resources of provided type",
        "operationId": "findAppContext",
        "produces": ["application/json"],
        "parameters": [{
          "name": "resource",
          "in": "query",
          "description": "Fusion app",
          "required": false,
          "type": "string"
        }, {
          "name": "resourceType",
          "in": "query",
          "description": "Resource type to filter by",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        }
      }
    },
    "/links/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_12",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/nodes/hosts": {
      "get": {
        "summary": "Returns a list of hosts running endpoints",
        "description": "",
        "operationId": "hosts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/nodes/upByHost": {
      "get": {
        "summary": "Returns a list of running endpoints grouped by host",
        "description": "",
        "operationId": "upByHost",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/up": {
      "get": {
        "summary": "Returns a list of running endpoints grouped by service",
        "description": "",
        "operationId": "up",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_13",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/objects/validate": {
      "post": {
        "summary": "Validate objects",
        "description": "",
        "operationId": "validate",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "The objects to validate",
          "required": false,
          "schema": {
            "$ref": "#/definitions/FormDataMultiPart"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ImportResult"
            }
          }
        }
      }
    },
    "/objects/export": {
      "get": {
        "summary": "Export objects as JSON",
        "description": "Omit parameters to export all objects",
        "operationId": "exportJson",
        "consumes": ["application/json"],
        "produces": ["application/json; qs=0.85"],
        "parameters": [{
          "name": "type",
          "in": "query",
          "description": "One or more of: collection, index-pipeline, query-pipeline, search-cluster, datasource, parser, group, link, task, job, spark, blob, appkit or app",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "filterPolicy",
          "in": "query",
          "description": "One of: 'system' (filter system objects when exporting a particular type of object) or 'none' (export all objects of that type)",
          "required": false,
          "type": "string",
          "default": "system",
          "enum": ["SYSTEM", "NONE"]
        }, {
          "name": "deep",
          "in": "query",
          "description": "'True' to include all linked objects",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExportContainer"
            }
          }
        }
      }
    },
    "/objects/import": {
      "post": {
        "summary": "Import one or more objects",
        "description": "Validation is performed before import. Import starts only if validation succeeds.",
        "operationId": "importData",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "importPolicy",
          "in": "query",
          "description": "One of: abort, merge, overwrite",
          "required": false,
          "type": "string",
          "enum": ["ABORT", "MERGE", "OVERWRITE"]
        }, {
          "in": "body",
          "name": "body",
          "description": "The objects to import",
          "required": false,
          "schema": {
            "$ref": "#/definitions/FormDataMultiPart"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ImportResult"
            }
          }
        }
      }
    },
    "/objects/substitutions": {
      "post": {
        "summary": "Returns variables declared in import file",
        "description": "",
        "operationId": "processSubstitutions",
        "consumes": ["application/zip"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Import zip file",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ImportSubstitutions"
            }
          }
        }
      }
    },
    "/objects/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_14",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "summary": "Get the specified entity",
        "description": "",
        "operationId": "getEntity_3",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entity",
        "description": "",
        "operationId": "deleteEntityWithBody_3",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "For supplying additional request parameters (such as relatedObjectIds) via request body instead of as request parameters. Use this if the URL is getting too long.",
          "required": false,
          "schema": {
            "$ref": "#/definitions/BodyRequestParams"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "summary": "Get all entities",
        "description": "",
        "operationId": "getAllEntities_3",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          }
        }
      }
    },
    "/groups/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getEntitySchema_3",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/groups/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_15",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/partitions/_changed": {
      "post": {
        "summary": "Change partitioned feature for a collection",
        "description": "",
        "operationId": "changeCallback",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Partitioned feature configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Feature"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/partitions/_schema": {
      "get": {
        "summary": "Partition feature schema for a given collection",
        "description": "",
        "operationId": "getSchema",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/collections/{collection}/partitions/_scheduledCallback": {
      "post": {
        "summary": "Scheduled maintenance on partitions for a given collection",
        "description": "",
        "operationId": "scheduledCallback",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/partitions": {
      "get": {
        "summary": "Returns list of partitions for a given collection",
        "description": "",
        "operationId": "getPartitions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/partitions/{partition}": {
      "delete": {
        "summary": "Delete a partition for a collection",
        "description": "",
        "operationId": "deletePartition",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "partition",
          "in": "path",
          "description": "Partition id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/partitions/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_16",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/registration/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_17",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/scheduler/schedules": {
      "get": {
        "summary": "Retrieve all matching schedules",
        "description": "",
        "operationId": "getSchedules",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "creatorType",
          "in": "query",
          "description": "The type of user that created the schedule",
          "required": false,
          "type": "string"
        }, {
          "name": "creatorId",
          "in": "query",
          "description": "The ID of the user that created the schedule",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Schedule"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new schedule",
        "description": "",
        "operationId": "addSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "JSON-formatted schedule configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Schedule"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a schedule",
        "description": "",
        "operationId": "deleteSchedules",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "creatorType",
          "in": "query",
          "description": "The type of user that created the schedule",
          "required": false,
          "type": "string"
        }, {
          "name": "creatorId",
          "in": "query",
          "description": "The ID of the user that created the schedule",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/scheduler/jobs": {
      "get": {
        "summary": "List all running jobs",
        "description": "",
        "operationId": "getRunningJobs",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Stop all running jobs",
        "description": "",
        "operationId": "stopRunningJobs",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/scheduler/schedules/{id}": {
      "get": {
        "summary": "Retrieve the specified schedule",
        "description": "",
        "operationId": "getSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The schedule ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Schedule"
            }
          }
        }
      },
      "put": {
        "summary": "Update a schedule",
        "description": "",
        "operationId": "updateSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The schedule ID",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted schedule configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Schedule"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Delete a schedule",
        "description": "",
        "operationId": "deleteSchedule",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The schedule ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/scheduler/jobs/{id}": {
      "get": {
        "summary": "Display a scheduled job",
        "description": "",
        "operationId": "getRunningJob",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The schedule ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Stop a running job",
        "description": "",
        "operationId": "stopRunningJob",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The schedule ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/scheduler/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_18",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/schema/fields.schema": {
      "get": {
        "summary": "Returns fields schema for a given collection",
        "description": "",
        "operationId": "getSchema_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/collections/{collection}/schema/fieldTypes": {
      "get": {
        "summary": "Returns field types from a given collection",
        "description": "",
        "operationId": "getFieldTypes",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SolrFieldType"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds a field type to a given collection",
        "description": "",
        "operationId": "addFieldType",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Field type configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SolrFieldType"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/dynamicfields.schema": {
      "get": {
        "summary": "Returns dynamic fields schema for a given collection",
        "description": "",
        "operationId": "getDynamicSchema",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/collections/{collection}/schema/dynamicfields": {
      "get": {
        "summary": "Returns dynamic fields for a given collection",
        "description": "",
        "operationId": "getDynamicFields",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DynamicField"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds a dynamic field to a given collection",
        "description": "",
        "operationId": "addDynamicField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Dynamic field configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/DynamicField"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/fields/{field}": {
      "delete": {
        "summary": "Deletes a field from a given collection",
        "description": "",
        "operationId": "deleteField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "field",
          "in": "path",
          "description": "Field name",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/dynamicfields/{field}": {
      "delete": {
        "summary": "Deletes a dynamic field from a given collection",
        "description": "",
        "operationId": "deleteDynamicField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "field",
          "in": "path",
          "description": "Field name",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/fields/{fieldName}": {
      "put": {
        "summary": "Updates a field from a given collection",
        "description": "",
        "operationId": "updateField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "fieldName",
          "in": "path",
          "description": "Field name",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Field configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Field"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/dynamicfields/{fieldName}": {
      "put": {
        "summary": "Updates a dynamic field from a given collection",
        "description": "",
        "operationId": "updateDynamicField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "fieldName",
          "in": "path",
          "description": "Field name",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Dynamic field configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/DynamicField"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/fieldTypes/{fieldTypeId}": {
      "put": {
        "summary": "Updates a field type from a given collection",
        "description": "",
        "operationId": "updateFieldType",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "name": "fieldTypeId",
          "in": "path",
          "description": "Field type id",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Field type configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SolrFieldType"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/fields": {
      "get": {
        "summary": "Returns fields for a given collection",
        "description": "",
        "operationId": "getFields",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Field"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds a field to a given collection",
        "description": "",
        "operationId": "addField",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "Collection id",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "Field configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Field"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/schema/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_19",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/searchCluster": {
      "get": {
        "summary": "Return the definitions for all defined clusters",
        "description": "",
        "operationId": "listSearchClusters_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SearchCluster"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new cluster definition",
        "description": "",
        "operationId": "createSearchCluster",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "JSON-formatted cluster configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SearchCluster"
          }
        }, {
          "name": "validate",
          "in": "query",
          "description": "Before creating the cluster definition, verify that Fusion can connect to this new search cluster correctly",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchCluster"
            }
          }
        }
      }
    },
    "/searchCluster/{id}": {
      "get": {
        "summary": "Return the definition for the specified cluster",
        "description": "",
        "operationId": "getSearchCluster",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The cluster ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchCluster"
            }
          }
        }
      },
      "put": {
        "summary": "Update a cluster definition",
        "description": "",
        "operationId": "createOrUpdateSearchCluster",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted cluster configuration values",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SearchCluster"
          }
        }, {
          "name": "validate",
          "in": "query",
          "description": "Validate the updated cluster definition before saving it",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchCluster"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a cluster definition",
        "description": "",
        "operationId": "deleteSearchCluster",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/searchCluster/_schema": {
      "get": {
        "summary": "Return the JSON schema for all configuration values",
        "description": "",
        "operationId": "getSchema_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/searchCluster/{id}/nodes": {
      "get": {
        "summary": "Get the status of each node of the cluster",
        "description": "",
        "operationId": "getClusterState",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The cluster ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              },
              "uniqueItems": true
            }
          }
        }
      }
    },
    "/searchCluster/{id}/systemInfo": {
      "get": {
        "summary": "Return details about a search cluster",
        "description": "Details include the JVM version, the OS, free space available, and so on",
        "operationId": "getSystemInfo",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "nodeName",
          "in": "query",
          "description": "Return information only for the named node",
          "required": false,
          "type": "string"
        }, {
          "name": "all",
          "in": "query",
          "description": "When true, system information for every node of the cluster is returned",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/SystemInfo"
              }
            }
          }
        }
      }
    },
    "/searchCluster/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_20",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/searchLogs/_changed": {
      "post": {
        "summary": "Change search logs feature for a collection",
        "description": "",
        "operationId": "changeCallback_1",
        "consumes": ["application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Search logs feature configuration",
          "required": false,
          "schema": {
            "$ref": "#/definitions/Feature"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/searchLogs/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_21",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/solrAdmin/{searchClusterId}/{path}": {
      "get": {
        "summary": "Issue a Solr command to the specified search cluster",
        "description": "",
        "operationId": "proxyGetRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to the Solr command to run",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "head": {
        "summary": "Issue an HTTP HEAD request to the specified Solr cluster",
        "description": "",
        "operationId": "proxyHeadRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path for the HTTP request",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "summary": "Issue a Solr command to the specified search cluster",
        "description": "",
        "operationId": "proxyPostRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to the Solr command to run",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "description": "Solr request entity",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "summary": "Issue a Solr command to the specified search cluster",
        "description": "",
        "operationId": "proxyPutRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to the Solr command to run",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "description": "Solr request entity",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "summary": "Issue a Solr command to the specified search cluster",
        "description": "",
        "operationId": "proxyDeleteRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to the Solr command to run",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "options": {
        "summary": "Retrieve the options for a Solr command",
        "description": "",
        "operationId": "proxyOptionsRequestToSolr",
        "parameters": [{
          "name": "searchClusterId",
          "in": "path",
          "description": "The Solr search cluster ID",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to the Solr command to run",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solrAdmin/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_22",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/solr-config/{path}": {
      "get": {
        "summary": "Retrieve information on a single file or a directory",
        "description": "",
        "operationId": "getConfigNodeAsBytes",
        "produces": ["application/octet-stream"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The collection that contains the configuration files",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a specific file or nested child nodes. If the file is not nested, the filename can be entered without any path information",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a configuration file",
        "description": "",
        "operationId": "postFile",
        "consumes": ["*/*"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The collection that contains the configuration files",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a specific file or nested child nodes. If the file is not nested, the filename can be entered without any path information",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "reload",
          "in": "query",
          "description": "'True' to reload the collection and make the changes available to Solr immediately.",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "validate",
          "in": "query",
          "description": "Validate the configuration file before saving it",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"0\""
        }, {
          "in": "body",
          "name": "body",
          "description": "The content of the file to be saved",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "summary": "Replace a configuration file",
        "description": "",
        "operationId": "putFile_1",
        "consumes": ["*/*"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The collection that contains the configuration files",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a specific file or nested child nodes. If the file is not nested, the filename can be entered without any path information",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "reload",
          "in": "query",
          "description": "'True' to reload the collection and make the changes available to Solr immediately.",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "validate",
          "in": "query",
          "description": "Before updating the Solr configuration, reload the Solr collection and verify that it doesn't fail",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match against the specified blob",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "The content of the file to be saved",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/solr-config": {
      "get": {
        "summary": "Retrieve a list of all configuration files from ZooKeeper",
        "description": "",
        "operationId": "listConfigNodes",
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The collection that contains the configuration files",
          "required": true,
          "type": "string"
        }, {
          "name": "recursive",
          "in": "query",
          "description": "'True' to return children of nested ZooKeeper nodes",
          "required": false,
          "type": "boolean",
          "default": false
        }, {
          "name": "expand",
          "in": "query",
          "description": "If true, the binary content of a file is returned base64-encoded. Otherwise, only the metadata about each node is returned. To see the content of the file in plain text, you can add 'Accept: text/plain' to the request header. Alternately, you can get the raw bytes by adding 'Accept: application/octet-stream' to the header.",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SolrZkConfigNode"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/solr-config/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_23",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/solr": {
      "get": {
        "operationId": "ok",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solr/{collection}/{path}": {
      "get": {
        "operationId": "proxyRequestToSolr",
        "parameters": [{
          "name": "collection",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "operationId": "proxyPostRequestToSolr_1",
        "parameters": [{
          "name": "collection",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "operationId": "proxyPutRequestToSolr_1",
        "parameters": [{
          "name": "collection",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "operationId": "proxyDeleteRequestToSolr_1",
        "parameters": [{
          "name": "collection",
          "in": "path",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/InputStream"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solr/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_24",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/swagger": {
      "get": {
        "summary": "Get Fusion API spec as JSON",
        "description": "",
        "operationId": "allJson",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/yaml": {
      "get": {
        "summary": "Get Fusion API spec as YAML",
        "description": "",
        "operationId": "allYaml",
        "produces": ["text/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/multi-json": {
      "get": {
        "summary": "Get Fusion per-service API specs as JSON list",
        "description": "",
        "operationId": "perServiceJson",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/multi-yaml": {
      "get": {
        "summary": "Get Fusion per-service API specs as concatenated YAML blocks",
        "description": "",
        "operationId": "perServiceYaml",
        "produces": ["text/yaml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/swagger/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_25",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/synonyms/{path}/items": {
      "get": {
        "summary": "Export synonyms as a CSV file",
        "description": "",
        "operationId": "exportToCsv",
        "produces": ["text/csv; qs=0.9"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StreamingOutput"
            }
          }
        }
      },
      "post": {
        "summary": "Add a new entry to a synonyms file",
        "description": "",
        "operationId": "addSynonym",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted synonym entries",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SynonymEntry"
          }
        }, {
          "name": "commit",
          "in": "query",
          "description": "If true, commit the change to Solr immediately instead of asynchronously",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "fusion-user-name",
          "in": "header",
          "description": "The Fusion user for authentication",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SynonymEntry"
            }
          }
        }
      }
    },
    "/collections/{collection}/synonyms/{path}": {
      "get": {
        "summary": "Return editing READY/NOT_READY status for a single synonym file (or 404)",
        "description": "",
        "operationId": "getFile_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SynonymFile"
            }
          }
        }
      },
      "put": {
        "summary": "Change a synonym file's state",
        "description": "",
        "operationId": "changeState",
        "consumes": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted list of synonyms",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SynonymFile"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/synonyms/{path}/items/{id}": {
      "put": {
        "summary": "Update an entry in a synonyms file",
        "description": "",
        "operationId": "updateSynonym",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "id",
          "in": "path",
          "description": "The unique ID of the synonym entry",
          "required": true,
          "type": "string"
        }, {
          "in": "body",
          "name": "body",
          "description": "JSON-formatted synonym entries",
          "required": false,
          "schema": {
            "$ref": "#/definitions/SynonymEntry"
          }
        }, {
          "name": "commit",
          "in": "query",
          "description": "If true, commit the change to Solr immediately instead of asynchronously",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "fusion-user-name",
          "in": "header",
          "description": "The Fusion user for authentication",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SynonymEntry"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entry in a synonyms file",
        "description": "",
        "operationId": "deleteSynonym",
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "id",
          "in": "path",
          "description": "The unique ID of the synonym entry",
          "required": true,
          "type": "string"
        }, {
          "name": "commit",
          "in": "query",
          "description": "If true, commit the change to Solr immediately instead of asynchronously",
          "required": false,
          "type": "boolean",
          "default": true
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/collections/{collection}/synonyms/{path}/suggestions": {
      "get": {
        "summary": "Get term suggestions from synonyms/categories/comments for autocomplete/autosuggest purposes",
        "description": "",
        "operationId": "getSuggestions",
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }, {
          "name": "path",
          "in": "path",
          "description": "The path to a synonym file",
          "required": true,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "field",
          "in": "query",
          "description": "The field to search",
          "required": false,
          "type": "string"
        }, {
          "name": "q",
          "in": "query",
          "description": "The query term for which to get suggestions",
          "required": false,
          "type": "string"
        }],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/synonyms": {
      "get": {
        "summary": "Return a list of synonym files along with their editing READY/NOT_READY/NOT_SAVED states",
        "description": "",
        "operationId": "listFiles_1",
        "produces": ["application/json"],
        "parameters": [{
          "name": "collection",
          "in": "path",
          "description": "The name of a collection",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SynonymFile"
              }
            }
          }
        }
      }
    },
    "/collections/{collection}/synonyms/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_26",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/system/autocomplete/documents": {
      "get": {
        "operationId": "listDocs",
        "produces": ["application/json"],
        "parameters": [{
          "name": "canonicalForm",
          "in": "query",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/autocomplete/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_27",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/system/metric/{name}": {
      "get": {
        "summary": "Show data about a specific metric",
        "description": "",
        "operationId": "getSingleMetric",
        "produces": ["application/json"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "description": "The name of the metric to display",
          "required": true,
          "type": "string"
        }, {
          "name": "pretty",
          "in": "query",
          "description": "True to format the data for easier reading",
          "required": false,
          "type": "boolean"
        }, {
          "name": "rateUnit",
          "in": "query",
          "description": "The time unit ('seconds', 'minutes', and so on) to display rates",
          "required": false,
          "type": "string"
        }, {
          "name": "durationUnit",
          "in": "query",
          "description": "The time unit ('seconds', 'minutes', and so on) to display durations",
          "required": false,
          "type": "string"
        }, {
          "name": "showSamples",
          "in": "query",
          "description": "True to display the data values used in calculations",
          "required": false,
          "type": "boolean"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetricResponse"
            }
          }
        }
      }
    },
    "/system/resolve": {
      "get": {
        "summary": "Resolve a Uniform Resource Name (URN)",
        "description": "",
        "operationId": "resolveUrn",
        "parameters": [{
          "name": "urn",
          "in": "query",
          "description": "The URN to resolve",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/ping/zk": {
      "get": {
        "summary": "Query ZooKeeper to see whether it is up",
        "description": "If ZooKeeper is up, it returns 'pong'",
        "operationId": "pingZK",
        "produces": ["application/json", "text/plain"],
        "parameters": [{
          "name": "timeout",
          "in": "query",
          "description": "A timeout value, in seconds",
          "required": false,
          "type": "integer",
          "default": 30,
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/system/threads": {
      "get": {
        "summary": "Show all active system threads",
        "description": "",
        "operationId": "threadDump",
        "produces": ["application/json", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ThreadDump"
            }
          }
        }
      }
    },
    "/system/metricNames": {
      "get": {
        "summary": "Show available metric names",
        "description": "For use with the 'metric' endpoint",
        "operationId": "getMetricNames",
        "produces": ["application/json"],
        "parameters": [{
          "name": "pattern",
          "in": "query",
          "description": "A regular expression to find all configuration items that contain matching strings",
          "required": false,
          "type": "string"
        }, {
          "name": "prefix",
          "in": "query",
          "description": "Match all configuration items that start with the specified string",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/system/live_code": {
      "get": {
        "operationId": "live",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/teapot": {
      "get": {
        "summary": "I'm a little teapot...",
        "description": "",
        "operationId": "teapot",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/metrics": {
      "get": {
        "summary": "Show data about all system metrics",
        "description": "",
        "operationId": "getMetrics",
        "produces": ["application/json"],
        "parameters": [{
          "name": "pretty",
          "in": "query",
          "description": "True to format the data for easier reading",
          "required": false,
          "type": "boolean"
        }, {
          "name": "rateUnit",
          "in": "query",
          "description": "The time unit ('seconds', 'minutes', and so on) to display rates",
          "required": false,
          "type": "string"
        }, {
          "name": "durationUnit",
          "in": "query",
          "description": "The time unit ('seconds', 'minutes', and so on) to display durations",
          "required": false,
          "type": "string"
        }, {
          "name": "showSamples",
          "in": "query",
          "description": "True to display the data values used in calculations",
          "required": false,
          "type": "boolean"
        }, {
          "name": "pattern",
          "in": "query",
          "description": "A regular expression to find all configuration items that contain matching strings",
          "required": false,
          "type": "string"
        }, {
          "name": "prefix",
          "in": "query",
          "description": "Match all configuration items that start with the specified string",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetricResponse"
            }
          }
        }
      }
    },
    "/system/status_code": {
      "get": {
        "operationId": "getStatusCode",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/buffers": {
      "put": {
        "summary": "Flush the currently-active buffers",
        "description": "",
        "operationId": "flushBuffers",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/ping": {
      "get": {
        "summary": "Query the system to see whether it is up",
        "description": "If the system is up, it returns 'pong'",
        "operationId": "ping",
        "produces": ["application/json", "text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/system/gc": {
      "post": {
        "summary": "Run JVM garbage collection",
        "description": "",
        "operationId": "gc",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/system/version": {
      "get": {
        "operationId": "ver",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/system/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_28",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "summary": "Get the specified entity",
        "description": "",
        "operationId": "getEntity_4",
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an entity",
        "description": "",
        "operationId": "deleteEntityWithBody_4",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "description": "The entity ID",
          "required": true,
          "type": "string"
        }, {
          "name": "If-Match",
          "in": "header",
          "description": "An entity tag to match",
          "required": false,
          "type": "string",
          "default": "\"-1\""
        }, {
          "in": "body",
          "name": "body",
          "description": "For supplying additional request parameters (such as relatedObjectIds) via request body instead of as request parameters. Use this if the URL is getting too long.",
          "required": false,
          "schema": {
            "$ref": "#/definitions/BodyRequestParams"
          }
        }],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "summary": "Get all entities",
        "description": "",
        "operationId": "getAllEntities_4",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Entity"
              }
            }
          }
        }
      }
    },
    "/tasks/_schema": {
      "get": {
        "summary": "Get JSON schema for objects managed by this API",
        "description": "",
        "operationId": "getEntitySchema_4",
        "produces": ["application/schema+json; qs=1.0", "application/json; qs=0.9"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          }
        }
      }
    },
    "/tasks/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_29",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/update/all/signalCollection": {
      "post": {
        "summary": "This endpoint is only used in some special cases during upgrade",
        "description": "",
        "operationId": "updateAllSignalCollections",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/update/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_30",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    },
    "/zk/export/{path}": {
      "get": {
        "summary": "Download information from ZooKeeper",
        "description": "",
        "operationId": "getNodeInfo",
        "produces": ["application/json"],
        "parameters": [{
          "name": "path",
          "in": "query",
          "description": "ZooKeeper path",
          "required": false,
          "type": "string",
          "pattern": ".*"
        }, {
          "name": "recursive",
          "in": "query",
          "description": "Return children nodes",
          "required": false,
          "type": "boolean",
          "default": true
        }, {
          "name": "excludePaths",
          "in": "query",
          "description": "List of paths to exclude",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "includePaths",
          "in": "query",
          "description": "List of paths to include",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }, {
          "name": "encodeValues",
          "in": "query",
          "description": "Values encoding. Default is 'base64'",
          "required": false,
          "type": "string",
          "default": "base64"
        }, {
          "name": "ephemeral",
          "in": "query",
          "description": "Include ephemeral nodes. Default is false",
          "required": false,
          "type": "boolean",
          "default": false
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZNodeDump"
            }
          }
        }
      }
    },
    "/zk/export/status": {
      "get": {
        "summary": "Get the status of the service",
        "description": "",
        "operationId": "getStatus_31",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceStatus"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Entity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "AnyType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": ["string", "number", "integer", "boolean", "object", "array", "null", "ref"]
        },
        "title": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "enum": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "default": {
          "type": "object",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "readOnly": true
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "hints": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unsafe": {
          "type": "boolean",
          "readOnly": true
        },
        "oneOf": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AnyTypeObjectObject"
          }
        }
      }
    },
    "AnyTypeObjectObject": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": ["string", "number", "integer", "boolean", "object", "array", "null", "ref"]
        },
        "title": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "enum": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "default": {
          "type": "object",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "readOnly": true
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "hints": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unsafe": {
          "type": "boolean",
          "readOnly": true
        },
        "oneOf": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AnyTypeObjectObject"
          }
        }
      }
    },
    "ObjectType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": ["string", "number", "integer", "boolean", "object", "array", "null", "ref"]
        },
        "title": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "required": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/AnyType"
          }
        },
        "additionalProperties": {
          "type": "object",
          "readOnly": true
        },
        "minProperties": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "maxProperties": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "definitions": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/AnyType"
          }
        },
        "category": {
          "type": "string",
          "readOnly": true
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "enum": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unsafe": {
          "type": "boolean",
          "readOnly": true
        },
        "default": {
          "type": "object",
          "readOnly": true
        },
        "oneOf": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AnyTypeObjectObject"
          }
        },
        "propertyGroups": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }
        }
      }
    },
    "PropertyGroup": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BodyRequestParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BodyRequestParams": {
      "type": "object",
      "properties": {
        "params": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/BodyRequestParam"
          }
        }
      }
    },
    "ServiceStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["starting", "ok", "warning", "error", "shutdown"]
        },
        "node": {
          "type": "string",
          "readOnly": true
        },
        "messages": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/StatusMessage"
          }
        }
      }
    },
    "StatusMessage": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "EditingSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "owner": {
          "type": "string",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "version": {
          "type": "string"
        }
      }
    },
    "DiscardAction": {
      "allOf": [{
        "$ref": "#/definitions/SessionAction"
      }, {
        "type": "object",
        "properties": {}
      }]
    },
    "SaveAction": {
      "allOf": [{
        "$ref": "#/definitions/SessionAction"
      }, {
        "type": "object",
        "properties": {}
      }]
    },
    "SaveAsAction": {
      "allOf": [{
        "$ref": "#/definitions/SessionAction"
      }, {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "SessionAction": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "AppkitApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "contextPath": {
          "type": "string",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "war": {
          "type": "string",
          "readOnly": true
        },
        "warMd5": {
          "type": "string",
          "readOnly": true
        },
        "warSize": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "AppkitAppExportContainer": {
      "type": "object",
      "properties": {
        "appkitApp": {
          "readOnly": true,
          "$ref": "#/definitions/AppkitApp"
        },
        "editingSessions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/EditingSession"
          }
        }
      }
    },
    "Blob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "path": {
          "type": "string",
          "readOnly": true
        },
        "dir": {
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "type": "string",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "modifiedTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "md5": {
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Optional": {
      "type": "object",
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "OptionalByte[]": {
      "type": "object",
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "OptionalBlob": {
      "type": "object",
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "LinkManager": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/StreamLink"
        }
      }
    },
    "Stream": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      }
    },
    "StreamLink": {
      "type": "object",
      "properties": {
        "parallel": {
          "type": "boolean"
        }
      }
    },
    "Feature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "collectionId": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "Collection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "searchClusterId": {
          "type": "string"
        },
        "commitWithin": {
          "type": "integer",
          "format": "int32"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Feature"
          }
        },
        "compositeIdSpec": {
          "$ref": "#/definitions/CompositeIdSpec"
        },
        "solrParams": {
          "$ref": "#/definitions/CreateCollectionCmd"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": ["DATA", "LOGS", "METRICS", "SIGNALS", "SIGNALS_AGGREGATION", "SEARCHLOGS", "SYNONYMS", "RECOMMENDATIONS", "HISTORY", "BLOBS", "MESSAGES", "TAXONOMY", "CRAWL_DB", "JOB_HISTORY", "ARCHIVING", "AUTOCOMPLETE_DOCUMENTS", "QUERY_REWRITE", "USER_PREFS", "JOB_REPORTS", "ACL", "NULL"]
        },
        "relatedCollectionId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CompositeIdSpec": {
      "type": "object",
      "properties": {
        "routeKey1Field": {
          "type": "string"
        },
        "routeKey1Bits": {
          "type": "integer",
          "format": "int32"
        },
        "routeKey2Field": {
          "type": "string"
        },
        "routeKey2Bits": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CreateCollectionCmd": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "numShards": {
          "type": "integer",
          "format": "int32"
        },
        "replicationFactor": {
          "type": "integer",
          "format": "int32"
        },
        "collection.configName": {
          "type": "string"
        }
      }
    },
    "CollectionMetrics": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string",
          "readOnly": true
        },
        "documentCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "requestCount": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "avgTimePerRequestMs": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "CollectionInfo": {
      "type": "object",
      "properties": {
        "maxShardsPerNode": {
          "type": "integer",
          "format": "int32"
        },
        "replicationFactor": {
          "type": "integer",
          "format": "int32"
        },
        "configName": {
          "type": "string"
        },
        "shards": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ShardInfo"
          }
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "ReplicaInfo": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "core": {
          "type": "string"
        },
        "leader": {
          "type": "boolean"
        },
        "base_url": {
          "type": "string"
        },
        "node_name": {
          "type": "string"
        }
      }
    },
    "ShardInfo": {
      "type": "object",
      "properties": {
        "range": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "replicas": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ReplicaInfo"
          }
        }
      }
    },
    "AllowedValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CallParams": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": ["get", "put", "post", "delete"]
        },
        "queryParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entity": {
          "type": "object"
        }
      }
    },
    "FeatureSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaults": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "callback": {
          "$ref": "#/definitions/CallParams"
        }
      }
    },
    "FusionResource": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["APPKIT_APP", "APP", "COLLECTION", "INDEX_PIPELINE", "QUERY_PIPELINE", "INDEX_PROFILE", "QUERY_PROFILE", "BLOB", "PARSER", "DATASOURCE", "TASK", "SCHEDULE", "SEARCH_CLUSTER", "EXPERIMENT", "SPARK_JOB", "GROUP", "CUSTOM_RULE_TYPE", "SUBSCRIPTION", "DATA_MODEL", "TEMPLATE", "ZONE", "TEMPLATE_SETTINGS", "TYPE", "RESOURCE", "NULL"]
        },
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "canonicalName": {
          "type": "string"
        }
      }
    },
    "HistoryEvent": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "error": {
          "$ref": "#/definitions/RESTError"
        }
      }
    },
    "JobExecutionError": {
      "allOf": [{
        "$ref": "#/definitions/RESTError"
      }, {
        "type": "object",
        "properties": {
          "job": {
            "readOnly": true,
            "$ref": "#/definitions/FusionResource"
          },
          "jobRunId": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "RESTError": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "httpStatusCode": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "error": {
          "type": "string",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "details": {
          "type": "string",
          "readOnly": true
        },
        "cause": {
          "readOnly": true,
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        },
        "requestId": {
          "type": "string",
          "readOnly": true
        },
        "class": {
          "type": "string",
          "readOnly": true
        },
        "httpStatusMessage": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RESTValidationError": {
      "allOf": [{
        "$ref": "#/definitions/RESTError"
      }, {
        "type": "object",
        "properties": {
          "validationErrors": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/definitions/ValidationError"
            }
          },
          "cause": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }]
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "error": {
          "type": "string"
        },
        "exception": {
          "readOnly": true,
          "$ref": "#/definitions/Throwable"
        }
      }
    },
    "History": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/HistoryEvent"
          }
        }
      }
    },
    "JobRunView": {
      "type": "object",
      "properties": {
        "resource": {
          "readOnly": true,
          "$ref": "#/definitions/FusionResource"
        },
        "runId": {
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "error": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        },
        "extra": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        },
        "startedBy": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CronTrigger": {
      "allOf": [{
        "$ref": "#/definitions/JobTriggerConfig"
      }, {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "IntervalTrigger": {
      "allOf": [{
        "$ref": "#/definitions/JobTriggerConfig"
      }, {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "timeUnit": {
            "type": "string",
            "readOnly": true,
            "enum": ["second", "minute", "hour", "day", "week", "month"]
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      }]
    },
    "JobChainTriggerConfig": {
      "allOf": [{
        "$ref": "#/definitions/JobTriggerConfig"
      }, {
        "type": "object",
        "properties": {
          "triggerType": {
            "type": "string",
            "readOnly": true,
            "enum": ["on_success", "on_failure", "on_success_or_failure"]
          },
          "otherJob": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "JobConfig": {
      "type": "object",
      "properties": {
        "resource": {
          "readOnly": true,
          "$ref": "#/definitions/FusionResource"
        },
        "enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "triggers": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JobTriggerConfig"
          }
        },
        "default": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "JobTriggerConfig": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JobActionResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string",
          "readOnly": true
        },
        "action": {
          "type": "string",
          "readOnly": true,
          "enum": ["START", "PAUSE", "ABORT"]
        },
        "accepted": {
          "type": "boolean",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JobActionRequest": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "readOnly": true,
          "enum": ["START", "PAUSE", "ABORT"]
        },
        "comment": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JobView": {
      "type": "object",
      "properties": {
        "resource": {
          "readOnly": true,
          "$ref": "#/definitions/FusionResource"
        },
        "enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "startedBy": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "extra": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        },
        "lastStartTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "lastEndTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "nextStartTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "LicenseInfo": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean",
          "readOnly": true
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "licensedCapabilities": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "validationErrors": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "isInstalled": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "subject": {
          "readOnly": true,
          "$ref": "#/definitions/FusionResource"
        },
        "object": {
          "readOnly": true,
          "$ref": "#/definitions/FusionResource"
        },
        "linkType": {
          "type": "string",
          "readOnly": true,
          "enum": ["dependsOn", "supports", "isPartOf", "hasPart", "relatesTo", "inContextOf", "hasContext", "self"]
        },
        "originator": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ImportResult": {
      "type": "object",
      "properties": {
        "conflicts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variablesWarnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variablesErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variablesSubstitutions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validationWarnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "importErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "importActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "zipFileToken": {
          "type": "string"
        },
        "transformationMsgs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "BodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "ContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FormDataBodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "simple": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "FormDataContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FormDataMultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            }
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardType": {
          "type": "boolean"
        },
        "wildcardSubtype": {
          "type": "boolean"
        }
      }
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "MultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "ParameterizedHeader": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Providers": {
      "type": "object"
    },
    "AuthConfig": {
      "type": "object",
      "properties": {
        "authType": {
          "type": "string",
          "readOnly": true,
          "enum": ["none", "basic", "kerberos"]
        },
        "username": {
          "type": "string",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "readOnly": true
        },
        "keyTab": {
          "type": "string",
          "readOnly": true
        },
        "principal": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "BlobDownloadTask": {
      "allOf": [{
        "$ref": "#/definitions/Task"
      }, {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "readOnly": true
          },
          "blobId": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "ConfigCallParams": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": ["get", "put", "post", "delete"]
        },
        "queryParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entity": {
          "type": "string"
        }
      }
    },
    "CustomRuleTypeConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DataModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "indexPipeline": {
          "type": "string"
        },
        "queryPipeline": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataModelField"
          }
        }
      }
    },
    "DataModelField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "readOnly": true
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataModelSolrFieldMapping"
          }
        }
      }
    },
    "DataModelSolrFieldMapping": {
      "type": "object",
      "properties": {
        "solrField": {
          "type": "string"
        },
        "queryField": {
          "type": "boolean"
        },
        "phraseMatch": {
          "type": "boolean"
        },
        "boostValue": {
          "type": "number",
          "format": "double"
        },
        "phraseBoost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "modified": {
          "type": "string",
          "format": "date-time"
        },
        "connector": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "pipeline": {
          "type": "string"
        },
        "parserId": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Experiment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ExportContainer": {
      "type": "object",
      "properties": {
        "objects": {
          "$ref": "#/definitions/FusionObjects"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubstitutedProperty"
          }
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "FusionApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FusionObjects": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        },
        "indexPipelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexPipelineDefinition"
          }
        },
        "queryPipelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryPipelineDefinition"
          }
        },
        "searchClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchCluster"
          }
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Feature"
            }
          }
        },
        "indexProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexProfile"
          }
        },
        "queryProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryProfile"
          }
        },
        "parsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParserConfig"
          }
        },
        "objectGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ObjectGroup"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobConfig"
          }
        },
        "sparkJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SparkJobConfig"
          }
        },
        "blobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Blob"
          }
        },
        "experiments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Experiment"
          }
        },
        "appkitApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppkitAppExportContainer"
          }
        },
        "fusionApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FusionApp"
          }
        },
        "customRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomRuleTypeConfig"
          }
        },
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Template"
          }
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Zone"
          }
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "templateSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateSettings"
          }
        },
        "dataModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataModel"
          }
        },
        "dataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        }
      }
    },
    "IndexPipelineDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IndexProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "formatVersion": {
          "type": "string"
        },
        "exportedBy": {
          "type": "string"
        },
        "exportedDate": {
          "type": "string"
        },
        "fusionVersion": {
          "type": "string"
        },
        "fusionGuid": {
          "type": "string"
        }
      }
    },
    "ObjectGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "isSystem": {
          "type": "boolean",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ParserConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "QueryPipelineDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "QueryProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Schema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchCluster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "connectString": {
          "type": "string",
          "readOnly": true
        },
        "zkClientTimeout": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "zkConnectTimeout": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "cloud": {
          "type": "boolean",
          "readOnly": true
        },
        "bufferFlushInterval": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "bufferSize": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "concurrency": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "authConfig": {
          "readOnly": true,
          "$ref": "#/definitions/AuthConfig"
        },
        "validateCluster": {
          "type": "boolean"
        }
      }
    },
    "ServiceCallTask": {
      "allOf": [{
        "$ref": "#/definitions/Task"
      }, {
        "type": "object",
        "properties": {
          "callParams": {
            "readOnly": true,
            "$ref": "#/definitions/ConfigCallParams"
          }
        }
      }]
    },
    "SparkJobConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SubstitutedProperty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        }
      }
    },
    "SystemLogsCleanupTask": {
      "allOf": [{
        "$ref": "#/definitions/Task"
      }, {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "readOnly": true
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "query": {
            "type": "string",
            "readOnly": true
          }
        }
      }]
    },
    "Task": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Template": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TemplateSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "app": {
          "type": "string"
        }
      }
    },
    "Zone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ImportSubstitutions": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubstitutedProperty"
          }
        },
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "zipFileToken": {
          "type": "string"
        }
      }
    },
    "CuratorComponent": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "zkConnect": {
          "type": "string"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "creatorType": {
          "type": "string"
        },
        "creatorId": {
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "repeatUnit": {
          "type": "string",
          "enum": ["MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH"]
        },
        "interval": {
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "type": "boolean"
        },
        "callParams": {
          "$ref": "#/definitions/CallParams"
        }
      }
    },
    "TaskAndJobConfig": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/Task"
        },
        "jobConfig": {
          "$ref": "#/definitions/JobConfig"
        }
      }
    },
    "Analyzer": {
      "type": "object",
      "properties": {
        "tokenizer": {
          "$ref": "#/definitions/Tokenizer"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "type": {
          "type": "string"
        },
        "class": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string"
        }
      }
    },
    "SolrFieldType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "analyzer": {
          "$ref": "#/definitions/Analyzer"
        },
        "indexAnalyzer": {
          "$ref": "#/definitions/Analyzer"
        },
        "queryAnalyzer": {
          "$ref": "#/definitions/Analyzer"
        },
        "indexed": {
          "type": "boolean"
        },
        "stored": {
          "type": "boolean"
        },
        "multiValued": {
          "type": "boolean"
        },
        "positionIncrementGap": {
          "type": "integer",
          "format": "int32"
        },
        "class": {
          "type": "string"
        }
      }
    },
    "Tokenizer": {
      "type": "object",
      "properties": {
        "class": {
          "type": "string"
        }
      }
    },
    "DynamicField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "indexed": {
          "type": "boolean"
        },
        "stored": {
          "type": "boolean"
        },
        "multiValued": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "docValues": {
          "type": "boolean"
        },
        "omitNorms": {
          "type": "boolean"
        },
        "omitPositions": {
          "type": "boolean"
        },
        "omitTermFreqAndPositions": {
          "type": "boolean"
        },
        "termVectors": {
          "type": "boolean"
        },
        "termPositions": {
          "type": "boolean"
        },
        "termOffsets": {
          "type": "boolean"
        },
        "copyDests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copySources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numDocs": {
          "type": "integer",
          "format": "int32"
        },
        "indexFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexField"
          }
        },
        "default": {
          "type": "string"
        }
      }
    },
    "IndexField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "numDocs": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Field": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "indexed": {
          "type": "boolean"
        },
        "stored": {
          "type": "boolean"
        },
        "multiValued": {
          "type": "boolean"
        },
        "required": {
          "type": "boolean"
        },
        "docValues": {
          "type": "boolean"
        },
        "omitNorms": {
          "type": "boolean"
        },
        "omitPositions": {
          "type": "boolean"
        },
        "omitTermFreqAndPositions": {
          "type": "boolean"
        },
        "termVectors": {
          "type": "boolean"
        },
        "termPositions": {
          "type": "boolean"
        },
        "termOffsets": {
          "type": "boolean"
        },
        "copyDests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copySources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numDocs": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "string"
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "baseUrl": {
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "HostInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "systemLoadAverage": {
          "type": "number",
          "format": "double"
        },
        "committedVirtualMemorySize": {
          "type": "integer",
          "format": "int64"
        },
        "freePhysicalMemorySize": {
          "type": "integer",
          "format": "int64"
        },
        "freeSwapSpaceSize": {
          "type": "integer",
          "format": "int64"
        },
        "processCpuTime": {
          "type": "integer",
          "format": "int64"
        },
        "totalPhysicalMemorySize": {
          "type": "integer",
          "format": "int64"
        },
        "totalSwapSpaceSize": {
          "type": "integer",
          "format": "int64"
        },
        "openFileDescriptorCount": {
          "type": "integer",
          "format": "int64"
        },
        "maxFileDescriptorCount": {
          "type": "integer",
          "format": "int64"
        },
        "uname": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        }
      }
    },
    "JVMInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "processors": {
          "type": "integer",
          "format": "int32"
        },
        "memory": {
          "$ref": "#/definitions/JVMMemoryInfo"
        }
      }
    },
    "JVMMemoryInfo": {
      "type": "object",
      "properties": {
        "raw": {
          "$ref": "#/definitions/JVMRawMemoryInfo"
        }
      }
    },
    "JVMRawMemoryInfo": {
      "type": "object",
      "properties": {
        "free": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        },
        "used": {
          "type": "integer",
          "format": "int64"
        },
        "used%": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": ["std", "solrcloud"]
        },
        "baseUrl": {
          "type": "string"
        },
        "lucene": {
          "$ref": "#/definitions/Version"
        },
        "jvm": {
          "$ref": "#/definitions/JVMInfo"
        },
        "system": {
          "$ref": "#/definitions/HostInfo"
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "solr-spec-version": {
          "type": "string"
        },
        "lucene-spec-version": {
          "type": "string"
        }
      }
    },
    "Builder": {
      "type": "object"
    },
    "PushbackInputStream": {
      "type": "object"
    },
    "SolrZkConfigNode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "format": "uri"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "isDir": {
          "type": "boolean"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SolrZkConfigNode"
          }
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "type": {
          "type": "string",
          "enum": ["STOPWORDS", "SYNONYMS"]
        }
      }
    },
    "SynonymEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "mapping": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "modified": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": ["EXPLICIT", "EQUIVALENT"]
        }
      }
    },
    "SynonymItems": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SynonymEntry"
          }
        }
      }
    },
    "SynonymFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["NOT_READY", "READY", "NOT_SAVED"]
        }
      }
    },
    "StreamingOutput": {
      "type": "object"
    },
    "Counter": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Gauge": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      }
    },
    "Histogram": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "snapshot": {
          "$ref": "#/definitions/Snapshot"
        }
      }
    },
    "Meter": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "meanRate": {
          "type": "number",
          "format": "double"
        },
        "fifteenMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "fiveMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "oneMinuteRate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Metric": {
      "type": "object"
    },
    "MetricRegistry": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Metric"
          }
        },
        "names": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "gauges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Gauge"
          }
        },
        "counters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Counter"
          }
        },
        "histograms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Histogram"
          }
        },
        "meters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Meter"
          }
        },
        "timers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Timer"
          }
        }
      }
    },
    "MetricResponse": {
      "type": "object",
      "properties": {
        "metricRegistry": {
          "$ref": "#/definitions/MetricRegistry"
        },
        "metricsList": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Metric"
          }
        },
        "pretty": {
          "type": "boolean"
        },
        "rateUnit": {
          "type": "string",
          "enum": ["NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS"]
        },
        "durationUnit": {
          "type": "string",
          "enum": ["NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS"]
        },
        "showSamples": {
          "type": "boolean"
        }
      }
    },
    "Snapshot": {
      "type": "object",
      "properties": {
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "max": {
          "type": "integer",
          "format": "int64"
        },
        "mean": {
          "type": "number",
          "format": "double"
        },
        "stdDev": {
          "type": "number",
          "format": "double"
        },
        "get75thPercentile": {
          "type": "number",
          "format": "double"
        },
        "get95thPercentile": {
          "type": "number",
          "format": "double"
        },
        "get98thPercentile": {
          "type": "number",
          "format": "double"
        },
        "get99thPercentile": {
          "type": "number",
          "format": "double"
        },
        "get999thPercentile": {
          "type": "number",
          "format": "double"
        },
        "median": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Timer": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "meanRate": {
          "type": "number",
          "format": "double"
        },
        "fifteenMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "fiveMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "oneMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "snapshot": {
          "$ref": "#/definitions/Snapshot"
        }
      }
    },
    "LockInfo": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "identityHashCode": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MonitorInfo": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "identityHashCode": {
          "type": "integer",
          "format": "int32"
        },
        "lockedStackDepth": {
          "type": "integer",
          "format": "int32"
        },
        "lockedStackFrame": {
          "$ref": "#/definitions/StackTraceElement"
        }
      }
    },
    "ThreadDump": {
      "type": "object",
      "properties": {
        "threads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThreadInfo"
          }
        }
      }
    },
    "ThreadInfo": {
      "type": "object",
      "properties": {
        "threadName": {
          "type": "string"
        },
        "threadId": {
          "type": "integer",
          "format": "int64"
        },
        "blockedTime": {
          "type": "integer",
          "format": "int64"
        },
        "blockedCount": {
          "type": "integer",
          "format": "int64"
        },
        "waitedTime": {
          "type": "integer",
          "format": "int64"
        },
        "waitedCount": {
          "type": "integer",
          "format": "int64"
        },
        "lockName": {
          "type": "string"
        },
        "lockOwnerId": {
          "type": "integer",
          "format": "int64"
        },
        "lockOwnerName": {
          "type": "string"
        },
        "inNative": {
          "type": "boolean"
        },
        "suspended": {
          "type": "boolean"
        },
        "threadState": {
          "type": "string",
          "enum": ["NEW", "RUNNABLE", "BLOCKED", "WAITING", "TIMED_WAITING", "TERMINATED"]
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "lockedMonitors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonitorInfo"
          }
        },
        "lockedSynchronizers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LockInfo"
          }
        },
        "lockInfo": {
          "$ref": "#/definitions/LockInfo"
        }
      }
    },
    "Params": {
      "type": "object",
      "properties": {
        "zkHost": {
          "type": "string",
          "readOnly": true
        },
        "path": {
          "type": "string",
          "readOnly": true
        },
        "encodeValues": {
          "type": "string",
          "readOnly": true
        },
        "includePaths": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "excludePaths": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "recursive": {
          "type": "boolean",
          "readOnly": true
        },
        "ephemeral": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ZNode": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "readOnly": true
        },
        "children": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ZNode"
          }
        },
        "data": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ZNodeDump": {
      "type": "object",
      "properties": {
        "request": {
          "readOnly": true,
          "$ref": "#/definitions/ZNodeDumpRequest"
        },
        "response": {
          "readOnly": true,
          "$ref": "#/definitions/ZNode"
        }
      }
    },
    "ZNodeDumpRequest": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "params": {
          "readOnly": true,
          "$ref": "#/definitions/Params"
        }
      }
    }
  }
}