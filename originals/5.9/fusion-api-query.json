{
  "swagger": "2.0",
  "info": {
    "description": "A Lucidworks Fusion microservice for ML-enhanced ranking and retrieval.",
    "version": "5.9.4",
    "title": "Fusion Query Service API",
    "termsOfService": "https://lucidworks.com/legal/developer-license-agreement/",
    "contact": {
      "name": "Lucidworks",
      "url": "www.lucidworks.com",
      "email": "support@lucidworks.com"
    },
    "license": {
      "name": "License of API",
      "url": "https://lucidworks.com/legal/developer-license-agreement/"
    }
  },
  "host": "FUSION_HOST.com",
  "basePath": "/api/query",
  "tags": [
    {
      "name": "custom-rule-type-controller",
      "description": "Endpoints to define and manage custom rule type definitions."
    },
    {
      "name": "experiment-controller",
      "description": "Use the Experiments API to compare different configuration variants and determine which ones are most successful."
    },
    {
      "name": "plugin-controller",
      "description": "Endpoints for managing query stage plugins"
    },
    {
      "name": "query-pipeline-controller",
      "description": "Endpoints for executing queries and for CRUD operations on query pipelines"
    },
    {
      "name": "query-pipeline-template-controller",
      "description": "Used internally to generate query pipelines from a template."
    },
    {
      "name": "query-profile-controller",
      "description": "The Query Profiles API allows users to manage query profiles. Query profiles allow users to change query pipelines during search time while pointing the search toward a static endpoint. This gives flexibility to test different stage combinations without reconfiguration."
    },
    {
      "name": "query-profile-crud-controller",
      "description": "Endpoints to perform Create-Read-Update-Delete operations on Query Profiles."
    },
    {
      "name": "query-rewrite-controller",
      "description": "Endpoints to manage query rewrites and rules. Query rewriting is a strategy for improving relevancy using AI-generated data. Many of Fusion AI’s features can be used to rewrite incoming queries prior to submitting them to Fusion’s Solr core. These rewrites produce more relevant search results with higher conversion rates. Primarily for internal use."
    },
    {
      "name": "query-stage-controller",
      "description": "The Query Stages API provides endpoints to manage query stage instances and list query stage configuration properties"
    },
    {
      "name": "signals-controller",
      "description": "Endpoints to index signals."
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/custom-rule-types": {
      "get": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntitiesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "Optional parameters to filter the results. Primarily for internal use",
            "required": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomRuleTypeConfigRes"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntityUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomRuleTypeConfigReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomRuleTypeConfigRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/custom-rule-types/_schema": {
      "get": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchemaUsingGET",
        "produces": [
          "application/json;qs=0.9",
          "application/schema+json;qs=1.0"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectTypeRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/custom-rule-types/status": {
      "get": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/custom-rule-types/{id}": {
      "get": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntityUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomRuleTypeConfigRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntityUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomRuleTypeConfigReq"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomRuleTypeConfigRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "custom-rule-type-controller"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntityUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntitiesUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "Optional parameters to filter the results. Primarily for internal use",
            "required": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentRes"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntityUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/_schema": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchemaUsingGET_1",
        "produces": [
          "application/json;qs=0.9",
          "application/schema+json;qs=1.0"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/status": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_1",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/{id}": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntityUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntityUsingPUT_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentReq"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntityUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/experiments/{id}/groundTruth": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get the ground truth results for an experiment as CSV",
        "operationId": "getGroundTruthResultsAsCsvUsingGET",
        "produces": [
          "application/json;qs=1.0",
          "text/csv;qs=0.5"
        ],
        "parameters": [
          {
            "name": "docLimit",
            "in": "query",
            "description": "A limit on the number of entries to return",
            "required": false,
            "type": "integer",
            "default": 10,
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryLimit",
            "in": "query",
            "description": "A limit on the number of queries to return per entry",
            "required": false,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/{id}/history": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get the job histories for an experiment",
        "operationId": "getHistoryUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentHistoryEntry"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/{id}/job": {
      "post": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Start an experiment",
        "operationId": "startJobUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Stop an experiment",
        "operationId": "stopJobUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRes"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/experiments/{id}/metrics": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get metrics for all runs of an experiment",
        "operationId": "getMetricsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentMetricResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Recompute metrics based on the results of an experiment",
        "operationId": "recomputeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "sync",
            "in": "query",
            "description": "Whether to wait for the experiment to finish. If false, metrics are retrieved from the current job status which may be empty if the job has not started yet.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "syncWaitSeconds",
            "in": "query",
            "description": "The maximum time to wait for an experiment to finish in seconds. Only used if sync=true",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentRecomputeResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/{id}/metrics/{runId}": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get metrics for a specific run of an experiment",
        "operationId": "getMetricsForRunUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "A job run ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentMetricResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/experiments/{id}/variant": {
      "get": {
        "tags": [
          "experiment-controller"
        ],
        "summary": "Get the variant that would be picked for a given user ID",
        "description": "Assumes all traffic is routed to the experiment. Mainly used for debugging purposes.",
        "operationId": "getVariantUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An experiment ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "A user ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExperimentVariantRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-pipelines": {
      "get": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Get all query pipelines",
        "operationId": "getAllEntitiesUsingGET_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "Optional parameters to filter the results. Primarily for internal use",
            "required": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryPipelineDefinitionRes"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Create a new query pipeline from JSON",
        "operationId": "createEntityUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinitionReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinitionRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-pipelines/_schema": {
      "get": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchemaUsingGET_2",
        "produces": [
          "application/json;qs=0.9",
          "application/schema+json;qs=1.0"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-pipelines/status": {
      "get": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_2",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-pipelines/{id}": {
      "get": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Get a query pipeline as JSON by unique ID",
        "operationId": "getEntityUsingGET_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A pipeline ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinitionRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Update a query pipeline from JSON",
        "operationId": "updateEntityUsingPUT_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinitionReq"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "A pipeline ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinitionRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntityUsingDELETE_2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-pipelines/{id}/collections/{collection}": {
      "post": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Send a query with DSL request through a pipeline",
        "description": "A pipeline will be executed in DSL mode",
        "operationId": "queryWithDSLUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "The name of a collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "dslRequest",
            "description": "A DSL request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DslRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "A pipeline ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DslResponseWrapper"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-pipelines/{id}/collections/{collection}/{handler}": {
      "get": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Send a query through a pipeline",
        "description": "Append a Solr query string to the request, as in '/api/apollo/query-pipelines/<id>/collections/<collectionName>/<handler>?<solrQuery>'",
        "operationId": "queryUsingGET",
        "produces": [
          "application/*",
          "text/*"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "The name of a collection",
            "required": true,
            "type": "string"
          },
          {
            "name": "handler",
            "in": "path",
            "description": "The name of a Solr request handler",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A pipeline ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WriteableResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-pipeline-controller"
        ],
        "summary": "Send a query through a pipeline",
        "description": "Use this method if the length of your query exceeds normal GET limitations.  Append a Solr query string to the request, as in '/api/apollo/query-pipelines/<id>/collections/<collectionName>/<handler>?<solrQuery>'",
        "operationId": "queryWithAudioUsingPOST",
        "consumes": [
          "application/json",
          "audio/wav"
        ],
        "produces": [
          "application/*",
          "text/*"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "The name of a collection",
            "required": true,
            "type": "string"
          },
          {
            "name": "handler",
            "in": "path",
            "description": "The name of a Solr request handler",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A pipeline ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WriteableResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-profiles": {
      "get": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Get all entities",
        "operationId": "getAllEntitiesUsingGET_3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "Optional parameters to filter the results. Primarily for internal use",
            "required": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryProfileRes"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Create a new entity from JSON",
        "operationId": "createEntityUsingPOST_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryProfileReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryProfileRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-profiles/_schema": {
      "get": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Get JSON schema for objects managed by this API",
        "operationId": "getEntitySchemaUsingGET_3",
        "produces": [
          "application/json;qs=0.9",
          "application/schema+json;qs=1.0"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-profiles/status": {
      "get": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_5",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-profiles/{id}": {
      "get": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Get the entity as JSON by unique ID",
        "operationId": "getEntityUsingGET_3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryProfileRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Update an entity from JSON",
        "operationId": "updateEntityUsingPUT_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "An entity serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryProfileReq"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryProfileRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "query-profile-crud-controller"
        ],
        "summary": "Delete an entity by unique ID",
        "operationId": "deleteEntityUsingDELETE_3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Indicates the application on which operations should be performed",
            "required": false,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "id",
            "in": "path",
            "description": "An entity ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-rewrite/export/{id}": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Export all query rewrite documents from a Solr collection.",
        "operationId": "exportQueryRewriteCollectionUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Solr collection ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": false,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StreamingResponseBody"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/instances": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "List query rewrite instances for an application",
        "operationId": "listUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "An edit session ID filter. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryRewriteRes"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Create a new query rewrite",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "newObject",
            "description": "A query rewrite serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryRewriteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryRewriteRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Create, update or delete multiple objects",
        "operationId": "doBulkOperationUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "bulkOperation",
            "description": "The bulk operation to execute",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkOperation"
            }
          },
          {
            "name": "checkCreateConflict",
            "in": "query",
            "description": "Whether to check if there will be any create conflicts",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "checkUpdateConflict",
            "in": "query",
            "description": "Whether to check if there will be any update conflicts",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/instances/{id}": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Get details for an existing query rewrite",
        "operationId": "getQueryRewriteUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "An edit session ID filter. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query rewrite ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryRewriteRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Update an existing query rewrite",
        "operationId": "updateQueryRewriteUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query rewrite ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updated",
            "description": "A query rewrite serialized to JSON",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryRewriteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryRewriteRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Delete an existing query rewrite",
        "operationId": "deleteQueryRewriteUsingDELETE",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query rewrite ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-rewrite/instances/{id}/publish": {
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Publish un-deployed query rewrites with specific id",
        "operationId": "publishByIdUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query rewrite ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "noOptimizeWithin",
            "in": "query",
            "description": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "required": false,
            "type": "integer",
            "default": 3600,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/publish": {
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Publish un-deployed query rewrites",
        "operationId": "publishUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "noOptimizeWithin",
            "in": "query",
            "description": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "required": false,
            "type": "integer",
            "default": 3600,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Delete un-deployed query rewrites",
        "operationId": "rollbackUsingDELETE",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-rewrite/publish/{types}": {
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Publish un-deployed query rewrites with an optional type filter",
        "operationId": "publishTypeUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "noOptimizeWithin",
            "in": "query",
            "description": "The number of seconds to wait after a publish before optimizing the query rewrite collection",
            "required": false,
            "type": "integer",
            "default": 3600,
            "format": "int64"
          },
          {
            "name": "types",
            "in": "path",
            "description": "Query rewrite types",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/publish/{type}": {
      "delete": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Delete un-deployed query rewrites with an optional type filter",
        "operationId": "rollbackTypeUsingDELETE",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "A query rewrite type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-rewrite/schema": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Get the JSON schema for creating a query rewrite object",
        "operationId": "getSchemaUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/schema/{type}": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Get the JSON schema for creating a specific type of object, such as a rule",
        "operationId": "getSchemaTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "type",
            "in": "path",
            "description": "A query rewrite type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/search": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Search the query rewrite staging collection to get facets and hits",
        "operationId": "searchUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "An edit session ID filter. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/search/targeted-docs": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Identify rules targeting the provided (main collection) document IDs",
        "operationId": "searchByTargetedDocIdGETUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "docId",
            "in": "query",
            "description": "A list of main collection document IDs",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "An edit session ID filter. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/search/{type}": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Search the query rewrite staging collection to get facets and hits",
        "operationId": "searchTypeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "An edit session ID filter. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "A query rewrite type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/status": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_6",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-rewrite/undo/{id}": {
      "delete": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Undo all pending changes to a specific doc that has not been published; this is not an ACID transactional operation in that we remove all changes made to a doc in a session and not just the last operation.",
        "operationId": "undoUsingDELETE",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "editSessionId",
            "in": "query",
            "description": "The edit session ID associated with this request. Equivalent to a Fusion username",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query rewrite ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-rewrite/{type}": {
      "get": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Get status information for a specific query rewrite type, such as rules or spell correction",
        "operationId": "getQueryRewriteTypeStatusUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "name": "type",
            "in": "path",
            "description": "A query rewrite type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryRewriteTypeStatusRes"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "query-rewrite-controller"
        ],
        "summary": "Update the enabled status of a query rewrite type",
        "operationId": "updateQueryRewriteTypeEnabledUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "An application name",
            "required": true,
            "type": "string",
            "x-example": "app:SomeApp"
          },
          {
            "in": "body",
            "name": "status",
            "description": "The enabled status of a query rewrite type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryRewriteTypeStatusReq"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "A query rewrite type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryRewriteTypeStatusRes"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-stage-plugins": {
      "get": {
        "tags": [
          "plugin-controller"
        ],
        "summary": "Retrieve a list of installed plugins",
        "operationId": "getPluginsUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "plugin-controller"
        ],
        "summary": "Install a new plugin or update an existing one",
        "operationId": "installOrUpdatePluginUsingPUT",
        "consumes": [
          "application/octet-stream",
          "application/x-zip-compressed",
          "application/zip"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-stage-plugins/{pluginId}": {
      "delete": {
        "tags": [
          "plugin-controller"
        ],
        "summary": "Uninstall a plugin",
        "operationId": "uninstallPluginUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pluginId",
            "in": "path",
            "description": "A plugin ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/query-stages/schema": {
      "get": {
        "tags": [
          "query-stage-controller"
        ],
        "summary": "Get the JSON schemas of all stage types",
        "operationId": "listStageSchemasUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ObjectType"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-stages/schema/{type}": {
      "get": {
        "tags": [
          "query-stage-controller"
        ],
        "summary": "Get the JSON schema for a single stage type",
        "operationId": "getStageSchemaUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "A query stage type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectType"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query-stages/status": {
      "get": {
        "tags": [
          "query-stage-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_7",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query/status": {
      "get": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_4",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query/{id:.*[\\/]}": {
      "get": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "Runs a query through a query profile",
        "description": "Supports path with a trailing slash to allow SolrJ to use a query profile by setting the requestHandler to \"/\"",
        "operationId": "querySolrjUsingGET",
        "produces": [
          "application/*",
          "text/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A query profile ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WriteableResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "Runs a query through a query profile",
        "description": "Supports path with a trailing slash to allow SolrJ to use a query profile by setting the requestHandler to \"/\". Same as GET but uses POST for long parameter lists",
        "operationId": "queryWithPostSolrjUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/*",
          "text/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A query profile ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "params",
            "description": "Additional parameters used when executing the query",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WriteableResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query/{id}": {
      "get": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "Runs a query through a query profile",
        "description": "The query pipeline, collection, and request handler are retrieved from the query profile",
        "operationId": "queryUsingGET_1",
        "produces": [
          "application/*",
          "text/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A query profile ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "params",
            "in": "query",
            "description": "Additional parameters used when executing the query",
            "required": true,
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WriteableResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "Send a query with DSL request through a pipeline",
        "description": "A pipeline will be executed in DSL mode",
        "operationId": "queryWithDslUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "dslRequest",
            "description": "A DSL request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DslRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query profile ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DslResponseWrapper"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/query/{id}/signals": {
      "post": {
        "tags": [
          "query-profile-controller"
        ],
        "summary": "Indexes JSON-format response signals into the signal collection specified in a query profile",
        "operationId": "submitSignalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Whether to execute the request asynchronously. If true, an autoCommit is issued and failures are not reported",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "commit",
            "in": "query",
            "description": "Whether to commit signals to the collection immediately after indexing",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "A query profile ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipeline",
            "in": "query",
            "description": "An index pipeline to use for processing signals. Note that the index pipeline must end with a Solr Indexer stage, and in this stage the `enforce_schema` property must be set to 'true'",
            "required": false,
            "type": "string",
            "default": "_signals_ingest"
          },
          {
            "in": "body",
            "name": "signals",
            "description": "A list of signal documents",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/signals/{collection}": {
      "post": {
        "tags": [
          "signals-controller"
        ],
        "summary": "Send one or more signals for indexing",
        "operationId": "createSignalsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "async",
            "in": "query",
            "description": "Whether to execute the request asynchronously. If true, an autoCommit is issued and failures are not reported",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "collection",
            "in": "path",
            "description": "The name of a collection",
            "required": true,
            "type": "string"
          },
          {
            "name": "commit",
            "in": "query",
            "description": "Whether to commit signals to the collection immediately after indexing",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pipeline",
            "in": "query",
            "description": "An index pipeline to use for processing signals. Note that the index pipeline must end with a Solr Indexer stage, and in this stage the `enforce_schema` property must be set to 'true'",
            "required": false,
            "type": "string",
            "default": "_signals_ingest"
          },
          {
            "in": "body",
            "name": "signals",
            "description": "JSON-formatted signals data",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/templates/query-pipelines": {
      "get": {
        "tags": [
          "query-pipeline-template-controller"
        ],
        "summary": "Get all available templates",
        "operationId": "getTemplatesUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iterable«QueryPipelineDefinition»"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/templates/query-pipelines/status": {
      "get": {
        "tags": [
          "query-pipeline-template-controller"
        ],
        "summary": "getStatus",
        "operationId": "getStatusUsingGET_3",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Error-ModelName{namespace='com.lucidworks.apollo.rest', name='ServiceStatus'}"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/templates/query-pipelines/{templateId}": {
      "get": {
        "tags": [
          "query-pipeline-template-controller"
        ],
        "summary": "Get a query pipeline template",
        "operationId": "getTemplateUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "An ID to use as the template ID",
            "required": false,
            "type": "string",
            "default": "A random UUID"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "A template ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueryPipelineDefinition"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Fusion Native Realm": {
      "type": "basic"
    }
  },
  "definitions": {
    "Annotation": {
      "type": "object",
      "properties": {
        "end": {
          "type": "integer",
          "format": "int64"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "label": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Annotation"
    },
    "AnyType": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyType"
    },
    "AnyTypeReq": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Req"
          }
        },
        "title": {
          "type": "string"
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyTypeReq"
    },
    "AnyTypeRes": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Res"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyTypeRes"
    },
    "AnyType«object,object»": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyType«object,object»"
    },
    "AnyType«object,object»Req": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Req"
          }
        },
        "title": {
          "type": "string"
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyType«object,object»Req"
    },
    "AnyType«object,object»Res": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Res"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "AnyType«object,object»Res"
    },
    "Banner": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        }
      },
      "title": "Banner"
    },
    "BoostByValue": {
      "type": "object",
      "properties": {
        "boosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyAndBoost"
          }
        },
        "field": {
          "type": "string"
        }
      },
      "title": "BoostByValue"
    },
    "BoostQuery": {
      "type": "object",
      "properties": {
        "boost": {
          "type": "number",
          "format": "double"
        },
        "query": {
          "$ref": "#/definitions/Query"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "BoostQuery"
    },
    "BulkOperation": {
      "type": "object",
      "properties": {
        "create": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "delete": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "update": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "title": "BulkOperation"
    },
    "Collation": {
      "type": "object",
      "properties": {
        "corrections": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hits": {
          "type": "integer",
          "format": "int64"
        },
        "query": {
          "type": "string"
        }
      },
      "title": "Collation"
    },
    "Command": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Command"
    },
    "Counter": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Counter"
    },
    "CustomRuleTypeConfigReq": {
      "type": "object",
      "properties": {
        "display_type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/ObjectTypeReq"
        }
      },
      "title": "CustomRuleTypeConfigReq"
    },
    "CustomRuleTypeConfigRes": {
      "type": "object",
      "properties": {
        "display_type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/ObjectTypeRes"
        }
      },
      "title": "CustomRuleTypeConfigRes"
    },
    "DateAndValue": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "DateAndValue"
    },
    "Debug": {
      "type": "object",
      "properties": {
        "solrParams": {
          "type": "object"
        }
      },
      "title": "Debug"
    },
    "DocList": {
      "type": "object",
      "properties": {
        "docs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseDocument"
          }
        },
        "hits": {
          "type": "integer",
          "format": "int64"
        },
        "maxScore": {
          "type": "number",
          "format": "double"
        },
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "title": "DocList"
    },
    "DslRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "object"
        },
        "facets": {
          "$ref": "#/definitions/Facets0"
        },
        "params": {
          "type": "object"
        },
        "queryDefinition": {
          "$ref": "#/definitions/QueryDefinition"
        },
        "results": {
          "$ref": "#/definitions/Results"
        }
      },
      "title": "DslRequest"
    },
    "DslResponseWrapper": {
      "type": "object",
      "properties": {
        "debugResponse": {
          "type": "object"
        },
        "facets": {
          "$ref": "#/definitions/Facets"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "results": {
          "$ref": "#/definitions/Results0"
        },
        "rules": {
          "$ref": "#/definitions/Rules"
        },
        "spellcheck": {
          "$ref": "#/definitions/Spellcheck"
        }
      },
      "title": "DslResponseWrapper"
    },
    "Event": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "params": {
          "type": "object"
        },
        "timestamp": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Event"
    },
    "ExperimentHistoryEntry": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/ExperimentRes"
        },
        "experimentEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "experimentStartDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ExperimentHistoryEntry"
    },
    "ExperimentMetricReq": {
      "type": "object",
      "properties": {
        "binary": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        }
      },
      "title": "ExperimentMetricReq"
    },
    "ExperimentMetricRes": {
      "type": "object",
      "properties": {
        "binary": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "primary": {
          "type": "boolean"
        }
      },
      "title": "ExperimentMetricRes"
    },
    "ExperimentMetricResponse": {
      "type": "object",
      "properties": {
        "confidence": {
          "type": "number",
          "format": "double"
        },
        "dataEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "dataStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "experimentEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "experimentStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "requestsInExperiment": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentMetricVariantResult"
          }
        },
        "runId": {
          "type": "string"
        },
        "totalRequests": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ExperimentMetricResponse"
    },
    "ExperimentMetricResult": {
      "type": "object",
      "properties": {
        "confidence": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "p": {
          "type": "number",
          "format": "double"
        },
        "probabilityOfBeating": {
          "type": "number",
          "format": "double"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DateAndValue"
          }
        }
      },
      "title": "ExperimentMetricResult"
    },
    "ExperimentMetricVariantResult": {
      "type": "object",
      "properties": {
        "percentRequests": {
          "type": "number",
          "format": "double"
        },
        "requests": {
          "type": "integer",
          "format": "int64"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentMetricResult"
          }
        },
        "variantName": {
          "type": "string"
        }
      },
      "title": "ExperimentMetricVariantResult"
    },
    "ExperimentRecomputeResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SparkJobStatus"
          }
        }
      },
      "title": "ExperimentRecomputeResponse"
    },
    "ExperimentReferenceReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "percentOfTraffic": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ExperimentReferenceReq"
    },
    "ExperimentReferenceRes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "percentOfTraffic": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ExperimentReferenceRes"
    },
    "ExperimentReq": {
      "type": "object",
      "properties": {
        "automaticallyAdjustTraffic": {
          "type": "boolean"
        },
        "baseSignalsCollection": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentMetricReq"
          }
        },
        "runId": {
          "type": "string"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "uniqueIdParameter": {
          "type": "string"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentVariantReq"
          }
        }
      },
      "title": "ExperimentReq"
    },
    "ExperimentRes": {
      "type": "object",
      "properties": {
        "automaticallyAdjustTraffic": {
          "type": "boolean"
        },
        "baseSignalsCollection": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentMetricRes"
          }
        },
        "runId": {
          "type": "string"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "uniqueIdParameter": {
          "type": "string"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentVariantRes"
          }
        }
      },
      "title": "ExperimentRes"
    },
    "ExperimentVariantReq": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParamAndValueReq"
          }
        },
        "queryPipeline": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ExperimentVariantReq"
    },
    "ExperimentVariantRes": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParamAndValueRes"
          }
        },
        "queryPipeline": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ExperimentVariantRes"
    },
    "FacetCountsCollection": {
      "type": "object",
      "properties": {
        "facet_fields": {
          "type": "object"
        },
        "facet_ranges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FacetRange"
          }
        }
      },
      "title": "FacetCountsCollection"
    },
    "FacetDomain": {
      "type": "object",
      "properties": {
        "additionalFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query"
          }
        },
        "excludedFiltersByName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "FacetDomain"
    },
    "FacetField": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/FacetDomain"
        },
        "ensuredValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "field": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "minCount": {
          "type": "integer",
          "format": "int32"
        },
        "missing": {
          "type": "boolean"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "prefix": {
          "type": "string"
        },
        "sort": {
          "type": "string",
          "enum": [
            "count",
            "index"
          ]
        }
      },
      "title": "FacetField"
    },
    "FacetRange": {
      "type": "object",
      "properties": {
        "after": {
          "type": "object"
        },
        "before": {
          "type": "object"
        },
        "between": {
          "type": "object"
        },
        "counts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "end": {
          "type": "object"
        },
        "gap": {
          "type": "object"
        },
        "start": {
          "type": "object"
        }
      },
      "title": "FacetRange"
    },
    "Facets": {
      "type": "object",
      "properties": {
        "field": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldFacets"
          }
        },
        "range": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RangeFacets"
          }
        }
      },
      "title": "Facets"
    },
    "Facets0": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetField"
          }
        },
        "groupFacets": {
          "type": "boolean"
        },
        "groupingMethod": {
          "type": "string",
          "enum": [
            "header_doc",
            "unique"
          ]
        },
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetRange"
          }
        }
      },
      "title": "Facets0"
    },
    "FieldCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "FieldCount"
    },
    "FieldFacets": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldCount"
          }
        },
        "label": {
          "type": "string"
        },
        "missing": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "FieldFacets"
    },
    "FusionResourceReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "APP",
            "APPKIT_APP",
            "BLOB",
            "COLLECTION",
            "CUSTOM_RULE_TYPE",
            "DATASOURCE",
            "DATA_MODEL",
            "EXPERIMENT",
            "GROUP",
            "INDEX_PIPELINE",
            "INDEX_PROFILE",
            "NULL",
            "PARSER",
            "QUERY_PIPELINE",
            "QUERY_PROFILE",
            "RESOURCE",
            "SCHEDULE",
            "SEARCH_CLUSTER",
            "SPARK_JOB",
            "SUBSCRIPTION",
            "TASK",
            "TEMPLATE",
            "TEMPLATE_SETTINGS",
            "TYPE",
            "ZONE"
          ]
        }
      },
      "title": "FusionResourceReq"
    },
    "FusionResourceRes": {
      "type": "object",
      "properties": {
        "canonicalName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "APP",
            "APPKIT_APP",
            "BLOB",
            "COLLECTION",
            "CUSTOM_RULE_TYPE",
            "DATASOURCE",
            "DATA_MODEL",
            "EXPERIMENT",
            "GROUP",
            "INDEX_PIPELINE",
            "INDEX_PROFILE",
            "NULL",
            "PARSER",
            "QUERY_PIPELINE",
            "QUERY_PROFILE",
            "RESOURCE",
            "SCHEDULE",
            "SEARCH_CLUSTER",
            "SPARK_JOB",
            "SUBSCRIPTION",
            "TASK",
            "TEMPLATE",
            "TEMPLATE_SETTINGS",
            "TYPE",
            "ZONE"
          ]
        },
        "uri": {
          "type": "string",
          "format": "uri"
        }
      },
      "title": "FusionResourceRes"
    },
    "Gauge": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "title": "Gauge"
    },
    "Group": {
      "type": "object",
      "properties": {
        "doclist": {
          "$ref": "#/definitions/Response"
        },
        "groupValue": {
          "type": "object"
        }
      },
      "title": "Group"
    },
    "GroupLeaderStrategy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "title": "GroupLeaderStrategy"
    },
    "GroupsCollection": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "numFound": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "GroupsCollection"
    },
    "Highlight": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "defaultHighlight": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "length": {
          "type": "integer",
          "format": "int32"
        },
        "post": {
          "type": "string"
        },
        "pre": {
          "type": "string"
        }
      },
      "title": "Highlight"
    },
    "Histogram": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "snapshot": {
          "$ref": "#/definitions/Snapshot"
        }
      },
      "title": "Histogram"
    },
    "Iterable«PipelineDocument»": {
      "type": "object",
      "title": "Iterable«PipelineDocument»"
    },
    "Iterable«QueryPipelineDefinition»": {
      "type": "object",
      "title": "Iterable«QueryPipelineDefinition»"
    },
    "JobRunViewReq": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "type": "object"
        },
        "extra": {
          "type": "object"
        },
        "resource": {
          "$ref": "#/definitions/FusionResourceReq"
        },
        "runId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "startedBy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "JobRunViewReq"
    },
    "JobRunViewRes": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "type": "object"
        },
        "extra": {
          "type": "object"
        },
        "resource": {
          "$ref": "#/definitions/FusionResourceRes"
        },
        "runId": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "startedBy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "JobRunViewRes"
    },
    "JsonBlobs": {
      "type": "object",
      "title": "JsonBlobs"
    },
    "KeyAndBoost": {
      "type": "object",
      "properties": {
        "boost": {
          "type": "number",
          "format": "double"
        },
        "key": {
          "type": "string"
        }
      },
      "title": "KeyAndBoost"
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "subtype": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "wildcardSubtype": {
          "type": "boolean"
        },
        "wildcardType": {
          "type": "boolean"
        }
      },
      "title": "MediaType"
    },
    "Meta": {
      "type": "object",
      "properties": {
        "debug": {
          "$ref": "#/definitions/Debug"
        },
        "timing": {
          "$ref": "#/definitions/Timing"
        }
      },
      "title": "Meta"
    },
    "Meter": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "fifteenMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "fiveMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "meanRate": {
          "type": "number",
          "format": "double"
        },
        "oneMinuteRate": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Meter"
    },
    "Metric": {
      "type": "object",
      "title": "Metric"
    },
    "MetricRegistry": {
      "type": "object",
      "properties": {
        "counters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Counter"
          }
        },
        "gauges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Gauge"
          }
        },
        "histograms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Histogram"
          }
        },
        "meters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Meter"
          }
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Metric"
          }
        },
        "names": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "timers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Timer"
          }
        }
      },
      "title": "MetricRegistry"
    },
    "MetricResponse": {
      "type": "object",
      "properties": {
        "durationUnit": {
          "type": "string",
          "enum": [
            "DAYS",
            "HOURS",
            "MICROSECONDS",
            "MILLISECONDS",
            "MINUTES",
            "NANOSECONDS",
            "SECONDS"
          ]
        },
        "metricRegistry": {
          "$ref": "#/definitions/MetricRegistry"
        },
        "metricsList": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Metric"
          }
        },
        "pretty": {
          "type": "boolean"
        },
        "rateUnit": {
          "type": "string",
          "enum": [
            "DAYS",
            "HOURS",
            "MICROSECONDS",
            "MILLISECONDS",
            "MINUTES",
            "NANOSECONDS",
            "SECONDS"
          ]
        },
        "showSamples": {
          "type": "boolean"
        }
      },
      "title": "MetricResponse"
    },
    "NamedFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "query": {
          "$ref": "#/definitions/Query"
        }
      },
      "title": "NamedFilter"
    },
    "ObjectType": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyType"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxProperties": {
          "type": "integer",
          "format": "int32"
        },
        "minProperties": {
          "type": "integer",
          "format": "int32"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyType"
          }
        },
        "propertyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyGroup"
          }
        },
        "required": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "ObjectType"
    },
    "ObjectTypeReq": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyTypeReq"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxProperties": {
          "type": "integer",
          "format": "int32"
        },
        "minProperties": {
          "type": "integer",
          "format": "int32"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Req"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyTypeReq"
          }
        },
        "propertyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyGroupReq"
          }
        },
        "required": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "ObjectTypeReq"
    },
    "ObjectTypeRes": {
      "type": "object",
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "category": {
          "type": "string"
        },
        "categoryPriority": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "type": "object"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyTypeRes"
          }
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "object"
          }
        },
        "hints": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "maxProperties": {
          "type": "integer",
          "format": "int32"
        },
        "minProperties": {
          "type": "integer",
          "format": "int32"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyType«object,object»Res"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AnyTypeRes"
          }
        },
        "propertyGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyGroupRes"
          }
        },
        "required": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "ref",
            "string"
          ]
        },
        "unsafe": {
          "type": "boolean"
        }
      },
      "title": "ObjectTypeRes"
    },
    "Pagination": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Pagination"
    },
    "ParamAndValueReq": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "policy": {
          "type": "string",
          "enum": [
            "append",
            "default",
            "remove",
            "replace"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ParamAndValueReq"
    },
    "ParamAndValueRes": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "policy": {
          "type": "string",
          "enum": [
            "append",
            "default",
            "remove",
            "replace"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ParamAndValueRes"
    },
    "PipelineDocument": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Command"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PipelineField"
          }
        },
        "hints": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "PipelineDocument"
    },
    "PipelineField": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Annotation"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "title": "PipelineField"
    },
    "PropertyGroup": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "PropertyGroup"
    },
    "PropertyGroupReq": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "PropertyGroupReq"
    },
    "PropertyGroupRes": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "PropertyGroupRes"
    },
    "Query": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "title": "Query"
    },
    "QueryDefinition": {
      "type": "object",
      "properties": {
        "boostsByQuery": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoostQuery"
          }
        },
        "boostsByValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoostByValue"
          }
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query"
          }
        },
        "groupedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Query"
          }
        },
        "groupedQuery": {
          "$ref": "#/definitions/Query"
        },
        "main": {
          "$ref": "#/definitions/Query"
        },
        "namedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedFilter"
          }
        },
        "userQuery": {
          "type": "string"
        }
      },
      "title": "QueryDefinition"
    },
    "QueryPipelineDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageConfig"
          }
        }
      },
      "title": "QueryPipelineDefinition"
    },
    "QueryPipelineDefinitionReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageConfig"
          }
        }
      },
      "title": "QueryPipelineDefinitionReq"
    },
    "QueryPipelineDefinitionRes": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageConfig"
          }
        }
      },
      "title": "QueryPipelineDefinitionRes"
    },
    "QueryProfileReq": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "experiment": {
          "$ref": "#/definitions/ExperimentReferenceReq"
        },
        "id": {
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParamAndValueReq"
          }
        },
        "queryPipeline": {
          "type": "string"
        },
        "searchHandler": {
          "type": "string"
        },
        "searchMode": {
          "type": "string"
        }
      },
      "title": "QueryProfileReq"
    },
    "QueryProfileRes": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "experiment": {
          "$ref": "#/definitions/ExperimentReferenceRes"
        },
        "id": {
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParamAndValueRes"
          }
        },
        "queryPipeline": {
          "type": "string"
        },
        "searchHandler": {
          "type": "string"
        },
        "searchMode": {
          "type": "string"
        }
      },
      "title": "QueryProfileRes"
    },
    "QueryRewriteReq": {
      "type": "object",
      "properties": {
        "base_object_id_s": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "deployed": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "review": {
          "type": "string",
          "enum": [
            "approved",
            "auto",
            "denied",
            "pending",
            "supplied"
          ]
        },
        "reviewedOn": {
          "type": "string",
          "format": "date-time"
        },
        "reviewer": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sourceType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "QueryRewriteReq"
    },
    "QueryRewriteRes": {
      "type": "object",
      "properties": {
        "base_object_id_s": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "deployed": {
          "type": "boolean"
        },
        "doc_type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "review": {
          "type": "string",
          "enum": [
            "approved",
            "auto",
            "denied",
            "pending",
            "supplied"
          ]
        },
        "reviewedOn": {
          "type": "string",
          "format": "date-time"
        },
        "reviewer": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sourceType": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "QueryRewriteRes"
    },
    "QueryRewriteTypeStatusReq": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "job": {
          "type": "string"
        },
        "lastDeployedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastJobStatus": {
          "$ref": "#/definitions/JobRunViewReq"
        },
        "numDeployed": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "QueryRewriteTypeStatusReq"
    },
    "QueryRewriteTypeStatusRes": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "job": {
          "type": "string"
        },
        "lastDeployedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastJobStatus": {
          "$ref": "#/definitions/JobRunViewRes"
        },
        "numDeployed": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "QueryRewriteTypeStatusRes"
    },
    "RangeFacets": {
      "type": "object",
      "properties": {
        "after": {
          "type": "integer",
          "format": "int32"
        },
        "before": {
          "type": "integer",
          "format": "int32"
        },
        "between": {
          "type": "integer",
          "format": "int32"
        },
        "counts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldCount"
          }
        },
        "end": {
          "type": "string"
        },
        "gap": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "start": {
          "type": "string"
        }
      },
      "title": "RangeFacets"
    },
    "Response": {
      "type": "object",
      "properties": {
        "docs": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "maxScore": {
          "type": "number",
          "format": "double"
        },
        "numFound": {
          "type": "integer",
          "format": "int64"
        },
        "start": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Response"
    },
    "ResponseDocument": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "string"
        },
        "fields": {
          "type": "object"
        },
        "groupValue": {
          "type": "string"
        },
        "groupedDocs": {
          "$ref": "#/definitions/DocList"
        },
        "highlights": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResponseHighlight"
            }
          }
        },
        "id": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ResponseDocument"
    },
    "ResponseEntity": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object"
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "ACCEPTED",
            "ALREADY_REPORTED",
            "BAD_GATEWAY",
            "BAD_REQUEST",
            "BANDWIDTH_LIMIT_EXCEEDED",
            "CHECKPOINT",
            "CONFLICT",
            "CONTINUE",
            "CREATED",
            "DESTINATION_LOCKED",
            "EXPECTATION_FAILED",
            "FAILED_DEPENDENCY",
            "FORBIDDEN",
            "FOUND",
            "GATEWAY_TIMEOUT",
            "GONE",
            "HTTP_VERSION_NOT_SUPPORTED",
            "IM_USED",
            "INSUFFICIENT_SPACE_ON_RESOURCE",
            "INSUFFICIENT_STORAGE",
            "INTERNAL_SERVER_ERROR",
            "I_AM_A_TEAPOT",
            "LENGTH_REQUIRED",
            "LOCKED",
            "LOOP_DETECTED",
            "METHOD_FAILURE",
            "METHOD_NOT_ALLOWED",
            "MOVED_PERMANENTLY",
            "MOVED_TEMPORARILY",
            "MULTIPLE_CHOICES",
            "MULTI_STATUS",
            "NETWORK_AUTHENTICATION_REQUIRED",
            "NON_AUTHORITATIVE_INFORMATION",
            "NOT_ACCEPTABLE",
            "NOT_EXTENDED",
            "NOT_FOUND",
            "NOT_IMPLEMENTED",
            "NOT_MODIFIED",
            "NO_CONTENT",
            "OK",
            "PARTIAL_CONTENT",
            "PAYLOAD_TOO_LARGE",
            "PAYMENT_REQUIRED",
            "PERMANENT_REDIRECT",
            "PRECONDITION_FAILED",
            "PRECONDITION_REQUIRED",
            "PROCESSING",
            "PROXY_AUTHENTICATION_REQUIRED",
            "REQUESTED_RANGE_NOT_SATISFIABLE",
            "REQUEST_ENTITY_TOO_LARGE",
            "REQUEST_HEADER_FIELDS_TOO_LARGE",
            "REQUEST_TIMEOUT",
            "REQUEST_URI_TOO_LONG",
            "RESET_CONTENT",
            "SEE_OTHER",
            "SERVICE_UNAVAILABLE",
            "SWITCHING_PROTOCOLS",
            "TEMPORARY_REDIRECT",
            "TOO_EARLY",
            "TOO_MANY_REQUESTS",
            "UNAUTHORIZED",
            "UNAVAILABLE_FOR_LEGAL_REASONS",
            "UNPROCESSABLE_ENTITY",
            "UNSUPPORTED_MEDIA_TYPE",
            "UPGRADE_REQUIRED",
            "URI_TOO_LONG",
            "USE_PROXY",
            "VARIANT_ALSO_NEGOTIATES"
          ]
        },
        "statusCodeValue": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResponseEntity"
    },
    "ResponseHeader": {
      "type": "object",
      "properties": {
        "QTime": {
          "type": "integer",
          "format": "int32"
        },
        "params": {
          "type": "object"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResponseHeader"
    },
    "ResponseHighlight": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "title": "ResponseHighlight"
    },
    "ResponseValues": {
      "type": "object",
      "title": "ResponseValues"
    },
    "Results": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "highlight": {
          "$ref": "#/definitions/Highlight"
        },
        "includeRawResponse": {
          "type": "boolean"
        },
        "returnScore": {
          "type": "boolean"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortElement"
          }
        },
        "start": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Results"
    },
    "Results0": {
      "type": "object",
      "properties": {
        "groupField": {
          "type": "string"
        },
        "list": {
          "$ref": "#/definitions/DocList"
        }
      },
      "title": "Results0"
    },
    "Rules": {
      "type": "object",
      "properties": {
        "banners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Banner"
          }
        },
        "jsonBlobs": {
          "$ref": "#/definitions/JsonBlobs"
        },
        "redirects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseValues": {
          "$ref": "#/definitions/ResponseValues"
        }
      },
      "title": "Rules"
    },
    "SearchResponse": {
      "type": "object",
      "properties": {
        "debug": {
          "type": "object"
        },
        "facet_counts": {
          "$ref": "#/definitions/FacetCountsCollection"
        },
        "facets": {
          "type": "object"
        },
        "fusionResponse": {
          "type": "object"
        },
        "grouped": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GroupsCollection"
          }
        },
        "highlighting": {
          "type": "object"
        },
        "response": {
          "$ref": "#/definitions/Response"
        },
        "responseHeader": {
          "$ref": "#/definitions/ResponseHeader"
        },
        "stats": {
          "$ref": "#/definitions/Stats"
        }
      },
      "title": "SearchResponse"
    },
    "Snapshot": {
      "type": "object",
      "properties": {
        "75thPercentile": {
          "type": "number",
          "format": "double"
        },
        "95thPercentile": {
          "type": "number",
          "format": "double"
        },
        "98thPercentile": {
          "type": "number",
          "format": "double"
        },
        "999thPercentile": {
          "type": "number",
          "format": "double"
        },
        "99thPercentile": {
          "type": "number",
          "format": "double"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        },
        "mean": {
          "type": "number",
          "format": "double"
        },
        "median": {
          "type": "number",
          "format": "double"
        },
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "stdDev": {
          "type": "number",
          "format": "double"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "Snapshot"
    },
    "SortElement": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "query": {
          "$ref": "#/definitions/Query"
        },
        "type": {
          "type": "string",
          "enum": [
            "expression",
            "field",
            "query",
            "relevancy"
          ]
        },
        "value": {
          "type": "string"
        }
      },
      "title": "SortElement"
    },
    "SparkJobStatus": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "cancelled",
            "cancelling",
            "error",
            "finished",
            "finishing",
            "idle",
            "running",
            "skipped",
            "starting",
            "unknown"
          ]
        }
      },
      "title": "SparkJobStatus"
    },
    "Spellcheck": {
      "type": "object",
      "properties": {
        "correctlySpelled": {
          "type": "boolean"
        },
        "querySuggestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collation"
          }
        },
        "wordSuggestions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Suggestion"
          }
        }
      },
      "title": "Spellcheck"
    },
    "StageConfig": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "skip": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "StageConfig"
    },
    "StageTime": {
      "type": "object",
      "properties": {
        "stage": {
          "type": "string"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "StageTime"
    },
    "Stats": {
      "type": "object",
      "properties": {
        "stats_fields": {
          "type": "object"
        }
      },
      "title": "Stats"
    },
    "StreamingResponseBody": {
      "type": "object",
      "title": "StreamingResponseBody"
    },
    "Suggestion": {
      "type": "object",
      "properties": {
        "endOffset": {
          "type": "integer",
          "format": "int32"
        },
        "numFound": {
          "type": "integer",
          "format": "int32"
        },
        "origFreq": {
          "type": "integer",
          "format": "int32"
        },
        "startOffset": {
          "type": "integer",
          "format": "int32"
        },
        "wordFreqList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordFreq"
          }
        }
      },
      "title": "Suggestion"
    },
    "Timer": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "fifteenMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "fiveMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "meanRate": {
          "type": "number",
          "format": "double"
        },
        "oneMinuteRate": {
          "type": "number",
          "format": "double"
        },
        "snapshot": {
          "$ref": "#/definitions/Snapshot"
        }
      },
      "title": "Timer"
    },
    "Timing": {
      "type": "object",
      "properties": {
        "mainQuery": {
          "type": "integer",
          "format": "int64"
        },
        "pipeline": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageTime"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Timing"
    },
    "WordFreq": {
      "type": "object",
      "properties": {
        "freq": {
          "type": "integer",
          "format": "int32"
        },
        "word": {
          "type": "string"
        }
      },
      "title": "WordFreq"
    },
    "WriteableResponse": {
      "type": "object",
      "properties": {
        "contentCharset": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        }
      },
      "title": "WriteableResponse"
    }
  }
}
